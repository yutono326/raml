(* * * * * * * * * * *
 * Resource Aware ML *
 * * * * * * * * * * *
 *
 * * *  Unit Tests * *
 *
 * File:
 *   tests/analyze_higher.raml
 *
 * Author:
 *   Jan Hoffmann, Shu-Chun Weng (2014)
 *
 * Description:
 *   Analyzing higher-order functions.
 *
 *)


let rec map f l =
  match l with
    | [] -> []
    | x::xs -> f x :: map f xs


let rec filter f l =
  match l with
    | [] -> []
    | x::xs ->
      let xs' = filter f xs in
      if f x then
	x::xs'
      else
	xs'

let rec fold f acc l =
  match l with
    | [] -> acc
    | x::xs ->
      let acc' = fold f acc xs in
      f acc' x

let append xs ys = fold (fun acc x -> x::acc) ys xs

let l = map (fun x -> x*2) (append [1;2;3;4] [5;6;7;8;9])
let _ = filter (fun x -> true) l

let _ = map (fun x -> x) [1;2;3;4]
let _ = map (fun x -> x+1*3) [1;2;3;4]

;;

()
