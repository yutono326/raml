(* * * * * * * * * * *
 * Resource Aware ML *
 * * * * * * * * * * *
 *
 * * *  Unit Tests * *
 *
 * File:
 *   tests/list_share.raml
 *
 * Author:
 *   Jan Hoffmann, Shu-Chun Weng (2014)
 * 
 * Description:
 *   Testing sharing with lists.
 *   
 *)


let rec map_rev1 f1 f2 l acc =
  match l with
    | [] -> acc
    | x::xs ->
      let g = map_rev2 f1 f2 in
      g xs ((f1 x) :: acc)

and map_rev2 f1 f2 l acc =
  match l with
    | [] -> acc
    | x::xs ->
      let g = map_rev1 f1 f2 in
      g xs ((f2 x) :: acc)

let rec map f l =
  match l with
    | [] -> []
    | x::xs ->
      let ys = map f xs in
      (f x)::ys

let map_it f y =
  (map (fun xs -> map f xs) y, map (fun xs -> map f xs) y)

let _ =
  let f = fun _ -> Raml.tick 1.0 in
  let y = [[1;2;3;1;3;3];[1;2;3;1;3;3];[1;2;3;1;3;3];[1;2;3;1;3;3]] in
  let h = map (fun xs -> map f xs) in
  (map (fun xs -> map f xs) y, h y)


let _ =
  let f = fun _ -> Raml.tick 1.0 in
  let y = [[1;2;3;1;3;3];[1;2;3;1;3;3];[1;2;3;1;3;3];[1;2;3;1;3;3]] in
  map_it f y


let rec append l1 l2 =
  match l1 with
    | [] -> l2
    | x::xs -> x::(append xs l2)


let rec attach x ys =
  match ys with
    | [] -> []
    | y::ys -> (x,y)::(attach x ys)


let rec pairs l =
  match l with
    | [] -> []
    | x::xs -> 
      let rec attach_loc xs =
	match xs with
	  | [] -> []
	  | y::ys -> (x,y)::(attach_loc ys)
      in
      append (attach_loc xs) (pairs xs)


let rec triples l =
  match l with
    | [] -> []
    | x::xs -> 
      let new_pairs = attach x (pairs xs) in
      let old_pairs = triples xs in
      append new_pairs old_pairs
  

let _ = triples [1;2;3;4;5]
