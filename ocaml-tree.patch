--- a/parsing/ast_mapper.ml	2013-07-23 10:48:47.000000000 -0400
+++ b/parsing/ast_mapper.ml	2018-07-27 11:28:33.000000000 -0400
@@ -527,8 +527,8 @@
 
 let apply ~source ~target mapper =
   let ic = open_in_bin source in
-  let magic = String.create (String.length ast_impl_magic_number) in
-  really_input ic magic 0 (String.length magic);
+  let magic = Bytes.to_string (String.create (String.length ast_impl_magic_number)) in
+  really_input ic (Bytes.of_string magic) 0 (String.length magic);
   if magic <> ast_impl_magic_number && magic <> ast_intf_magic_number then
     failwith "Bad magic";
   let input_name = input_value ic in
--- a/parsing/lexer.mll	2013-05-28 07:05:58.000000000 -0400
+++ b/parsing/lexer.mll	2018-07-27 11:28:33.000000000 -0400
@@ -94,7 +94,7 @@
 
 (* To buffer string literals *)
 
-let initial_string_buffer = String.create 256
+let initial_string_buffer = Bytes.to_string (String.create 256)
 let string_buff = ref initial_string_buffer
 let string_index = ref 0
 
@@ -106,9 +106,9 @@
   if !string_index >= String.length (!string_buff) then begin
     let new_buff = String.create (String.length (!string_buff) * 2) in
       String.blit (!string_buff) 0 new_buff 0 (String.length (!string_buff));
-      string_buff := new_buff
+      string_buff := Bytes.to_string new_buff
   end;
-  String.unsafe_set (!string_buff) (!string_index) c;
+  String.unsafe_set (Bytes.of_string !string_buff) (!string_index) c;
   incr string_index
 
 let store_lexeme lexbuf =
@@ -185,7 +185,7 @@
     else
       match s.[src] with
         '_' -> remove (src + 1) dst
-      |  c  -> s.[dst] <- c; remove (src + 1) (dst + 1)
+      |  c  -> (Bytes.of_string s).[dst] <- c; remove (src + 1) (dst + 1)
   in remove 0 0
 
 (* recover the name from a LABEL or OPTLABEL token *)
--- a/parsing/location.ml	2013-06-12 11:32:27.000000000 -0400
+++ b/parsing/location.ml	2018-07-27 11:28:33.000000000 -0400
@@ -83,7 +83,7 @@
   (* Count number of lines in phrase *)
   let lines = ref !num_loc_lines in
   for i = pos0 to lb.lex_buffer_len - 1 do
-    if lb.lex_buffer.[i] = '\n' then incr lines
+    if (Bytes.to_string lb.lex_buffer).[i] = '\n' then incr lines
   done;
   (* If too many lines, give up *)
   if !lines >= num_lines - 2 then raise Exit;
@@ -98,7 +98,7 @@
       Terminfo.standout true;
     if pos = loc1.loc_end.pos_cnum || pos = loc2.loc_end.pos_cnum then
       Terminfo.standout false;
-    let c = lb.lex_buffer.[pos + pos0] in
+    let c = (Bytes.to_string lb.lex_buffer).[pos + pos0] in
     print_char c;
     bol := (c = '\n')
   done;
@@ -119,7 +119,7 @@
   (* Determine line numbers for the start and end points *)
   let line_start = ref 0 and line_end = ref 0 in
   for pos = 0 to end_pos do
-    if lb.lex_buffer.[pos + pos0] = '\n' then begin
+    if (Bytes.to_string lb.lex_buffer).[pos + pos0] = '\n' then begin
       if loc.loc_start.pos_cnum > pos then incr line_start;
       if loc.loc_end.pos_cnum   > pos then incr line_end;
     end
@@ -132,7 +132,7 @@
   let line = ref 0 in
   let pos_at_bol = ref 0 in
   for pos = 0 to end_pos do
-    match lb.lex_buffer.[pos + pos0] with
+    match (Bytes.to_string lb.lex_buffer).[pos + pos0] with
     | '\n' ->
       if !line = !line_start && !line = !line_end then begin
         (* loc is on one line: underline location *)
--- a/parsing/printast.ml
+++ b/parsing/printast.ml
@@ -760,3 +760,5 @@ let interface ppf x = list 0 signature_item ppf x;;
 let implementation ppf x = list 0 structure_item ppf x;;
 
 let top_phrase ppf x = toplevel_phrase 0 ppf x;;
+
+let constant f x = fmt_constant f x;;
--- a/parsing/printast.mli
+++ b/parsing/printast.mli
@@ -16,3 +16,5 @@ open Format;;
 val interface : formatter -> signature_item list -> unit;;
 val implementation : formatter -> structure_item list -> unit;;
 val top_phrase : formatter -> toplevel_phrase -> unit;;
+
+val constant : formatter -> Asttypes.constant -> unit;;
--- a/typing/cmi_format.ml	2012-05-31 04:07:31.000000000 -0400
+++ b/typing/cmi_format.ml	2018-07-27 11:28:33.000000000 -0400
@@ -41,14 +41,14 @@
   let ic = open_in_bin filename in
   try
     let buffer = Misc.input_bytes ic (String.length Config.cmi_magic_number) in
-    if buffer <> Config.cmi_magic_number then begin
+    if buffer <> (Bytes.of_string Config.cmi_magic_number) then begin
       close_in ic;
       let pre_len = String.length Config.cmi_magic_number - 3 in
-      if String.sub buffer 0 pre_len
+      if String.sub (Bytes.to_string buffer) 0 pre_len
           = String.sub Config.cmi_magic_number 0 pre_len then
       begin
         let msg =
-          if buffer < Config.cmi_magic_number then "an older" else "a newer" in
+          if buffer < (Bytes.of_string Config.cmi_magic_number) then "an older" else "a newer" in
         raise (Error (Wrong_version_interface (filename, msg)))
       end else begin
         raise(Error(Not_an_interface filename))
--- a/typing/cmt_format.ml	2013-05-16 09:34:53.000000000 -0400
+++ b/typing/cmt_format.ml	2018-07-27 11:28:33.000000000 -0400
@@ -143,14 +143,16 @@
   let ic = open_in_bin filename in
   try
     let magic_number = read_magic_number ic in
+    let config_cmt_number = Bytes.of_string Config.cmt_magic_number in
+    let config_cmi_number = Bytes.of_string Config.cmi_magic_number in
     let cmi, cmt =
-      if magic_number = Config.cmt_magic_number then
+      if magic_number = config_cmt_number then
         None, Some (input_cmt ic)
-      else if magic_number = Config.cmi_magic_number then
+      else if magic_number = config_cmi_number then
         let cmi = Cmi_format.input_cmi ic in
         let cmt = try
                     let magic_number = read_magic_number ic in
-                    if magic_number = Config.cmt_magic_number then
+                    if magic_number = config_cmt_number then
                       let cmt = input_cmt ic in
                       Some cmt
                     else None
--- a/typing/ctype.ml	2013-09-06 01:48:29.000000000 -0400
+++ b/typing/ctype.ml	2018-01-15 22:31:57.000000000 -0500
@@ -415,7 +415,7 @@
                     (**************************************)
 
 
-exception Non_closed
+exception Non_closed_
 
 let rec closed_schema_rec ty =
   let ty = repr ty in
@@ -424,7 +424,7 @@
     ty.level <- pivot_level - level;
     match ty.desc with
       Tvar _ when level <> generic_level ->
-        raise Non_closed
+        raise Non_closed_
     | Tfield(_, kind, t1, t2) ->
         if field_kind_repr kind = Fpresent then
           closed_schema_rec t1;
@@ -443,7 +443,7 @@
     closed_schema_rec ty;
     unmark_type ty;
     true
-  with Non_closed ->
+  with Non_closed_ ->
     unmark_type ty;
     false
 
@@ -542,7 +542,7 @@
     CC_Method of type_expr * bool * string * type_expr
   | CC_Value of type_expr * bool * string * type_expr
 
-exception Failure of closed_class_failure
+exception Failure_ of closed_class_failure
 
 let closed_class params sign =
   let ty = object_fields (repr sign.cty_self) in
@@ -558,13 +558,13 @@
       (fun (lab, kind, ty) ->
         if field_kind_repr kind = Fpresent then
         try closed_type ty with Non_closed (ty0, real) ->
-          raise (Failure (CC_Method (ty0, real, lab, ty))))
+          raise (Failure_ (CC_Method (ty0, real, lab, ty))))
       fields;
     mark_type_params (repr sign.cty_self);
     List.iter unmark_type params;
     unmark_class_signature sign;
     None
-  with Failure reason ->
+  with Failure_ reason ->
     mark_type_params (repr sign.cty_self);
     List.iter unmark_type params;
     unmark_class_signature sign;
--- a/typing/includemod.ml	2013-06-03 10:46:04.000000000 -0400
+++ b/typing/includemod.ml	2018-07-27 11:28:33.000000000 -0400
@@ -471,8 +471,8 @@
   let size = !Clflags.error_size in
   size > 0 &&
   begin
-    if String.length !buffer < size then buffer := String.create size;
-    try ignore (Marshal.to_buffer !buffer 0 size obj []); false
+    if String.length !buffer < size then buffer := (Bytes.to_string (String.create size));
+    try ignore (Marshal.to_buffer (Bytes.of_string !buffer) 0 size obj []); false
     with _ -> true
   end
 
--- a/typing/cmt_format.mli	2012-07-12 07:02:18.000000000 -0400
+++ b/typing/cmt_format.mli	2018-07-27 11:28:33.000000000 -0400
@@ -92,7 +92,7 @@
 
 (* Miscellaneous functions *)
 
-val read_magic_number : in_channel -> string
+val read_magic_number : in_channel -> bytes
 
 val add_saved_type : binary_part -> unit
 val get_saved_types : unit -> binary_part list
--- a/typing/printtyped.ml
+++ b/typing/printtyped.ml
@@ -761,3 +761,7 @@ let interface ppf x = list 0 signature_item ppf x.sig_items;;
 let implementation ppf x = list 0 structure_item ppf x.str_items;;
 
 let implementation_with_coercion ppf (x, _) = implementation ppf x
+
+let pattern ppf x = pattern 0 ppf x
+
+let expression ppf x = expression 0 ppf x
--- a/typing/printtyped.mli
+++ b/typing/printtyped.mli
@@ -18,3 +18,6 @@ val implementation : formatter -> structure -> unit;;
 
 val implementation_with_coercion :
     formatter -> (structure * module_coercion) -> unit;;
+
+val pattern : formatter -> pattern -> unit;;
+val expression : formatter -> expression -> unit;;
--- a/typing/typecore.ml
+++ b/typing/typecore.ml
@@ -1537,6 +1537,7 @@ let type_format loc fmt =
               conversion j ty_arg
             | c -> conversion (j - 1) Predef.type_int
           end
+        (* (* Disabled in RAML2: using non-portable feature Printf.CamlinternalPr *)
         | '{' | '(' as c ->
           let j = j + 1 in
           if j >= len then incomplete_format fmt else
@@ -1551,6 +1552,7 @@ let type_format loc fmt =
           | '{' -> conversion (sj - 1) ty_sfmt
           | _ -> incr meta; conversion (j - 1) ty_sfmt end
         | ')' when !meta > 0 -> decr meta; scan_format (j + 1)
+        *)
         | c -> bad_conversion fmt i c in
       scan_flags i j in
 
--- a/utils/config.mlp
+++ b/utils/config.mlp
@@ -49,7 +49,7 @@ let mkexe = "%%MKEXE%%"
 let mkmaindll = "%%MKMAINDLL%%"
 
 let exec_magic_number = "Caml1999X008"
-and cmi_magic_number = "Caml1999I015"
+and cmi_magic_number = "%%HOST_CMI_MAGIC_NUMBER%%"
 and cmo_magic_number = "Caml1999O007"
 and cma_magic_number = "Caml1999A008"
 and cmx_magic_number = "Caml1999Y011"
--- a/utils/errors.ml	2013-08-20 11:32:13.000000000 -0400
+++ b/utils/errors.ml	2014-04-22 17:48:44.000000000 -0400
@@ -26,8 +26,10 @@
       Lexer.report_error ppf err
   | Syntaxerr.Error err ->
       Syntaxerr.report_error ppf err
+  (*
   | Pparse.Error err ->
       Pparse.report_error ppf err
+  *)
   | Env.Error err ->
       Location.print_error_cur_file ppf;
       Env.report_error ppf err
@@ -52,6 +54,7 @@
       Includemod.report_error ppf err
   | Typemod.Error(loc, env, err) ->
       Location.print_error ppf loc; Typemod.report_error env ppf err
+  (*
   | Translcore.Error(loc, err) ->
       Location.print_error ppf loc; Translcore.report_error ppf err
   | Translclass.Error(loc, err) ->
@@ -76,6 +79,7 @@
   | Warnings.Errors (n) ->
       Location.print_error_cur_file ppf;
       fprintf ppf "Some fatal warnings were triggered (%d occurrences)" n
+  *)
   | x -> fprintf ppf "@]"; raise x in
 
   fprintf ppf "@[%a@]@." report ex
--- a/utils/warnings.ml	2013-07-17 08:35:50.000000000 -0400
+++ b/utils/warnings.ml	2018-01-15 22:31:57.000000000 -0500
@@ -156,8 +156,8 @@
   | _ -> assert false
 ;;
 
-let active = Array.create (last_warning_number + 1) true;;
-let error = Array.create (last_warning_number + 1) false;;
+let active = Array.make (last_warning_number + 1) true;;
+let error = Array.make (last_warning_number + 1) false;;
 
 let is_active x = active.(number x);;
 let is_error x = error.(number x);;
@@ -186,7 +186,7 @@
     if i >= String.length s then () else
     match s.[i] with
     | 'A' .. 'Z' ->
-       List.iter set (letter (Char.lowercase s.[i]));
+       List.iter set (letter (Char.lowercase_ascii s.[i]));
        loop (i+1)
     | 'a' .. 'z' ->
        List.iter clear (letter s.[i]);
@@ -203,7 +203,7 @@
         for n = n1 to min n2 last_warning_number do myset n done;
         loop i
     | 'A' .. 'Z' ->
-       List.iter myset (letter (Char.lowercase s.[i]));
+       List.iter myset (letter (Char.lowercase_ascii s.[i]));
        loop (i+1)
     | 'a' .. 'z' ->
        List.iter myset (letter s.[i]);
--- a/utils/misc.ml	2013-06-05 13:54:20.000000000 -0400
+++ b/utils/misc.ml	2018-07-27 11:28:33.000000000 -0400
@@ -145,7 +145,7 @@
   let rec copy () =
     let n = input ic buff 0 0x1000 in
     if n = 0 then Buffer.contents b else
-      (Buffer.add_substring b buff 0 n; copy())
+      (Buffer.add_substring b (Bytes.to_string buff) 0 n; copy())
   in copy()
 
 
@@ -232,9 +232,9 @@
     let tbl_size = str_size / Sys.max_string_length + 1 in
     let tbl = Array.make tbl_size "" in
     for i = 0 to tbl_size - 2 do
-      tbl.(i) <- String.create Sys.max_string_length;
+      tbl.(i) <- Bytes.to_string (String.create Sys.max_string_length);
     done;
-    tbl.(tbl_size - 1) <- String.create (str_size mod Sys.max_string_length);
+    tbl.(tbl_size - 1) <- Bytes.to_string (String.create (str_size mod Sys.max_string_length));
     tbl
 
   let length tbl =
@@ -264,7 +264,7 @@
 
   let input_bytes ic len =
     let tbl = create len in
-    Array.iter (fun str -> really_input ic str 0 (String.length str)) tbl;
+    Array.iter (fun str -> really_input ic (Bytes.of_string str) 0 (String.length str)) tbl;
     tbl
 end
 
diff -u utils/misc.mli /Users/hoffmann/Work/repositories/git/raml/utils/misc.mli
--- a/utils/misc.mli	2013-06-05 13:54:20.000000000 -0400
+++ b/utils/misc.mli	2018-07-27 11:28:33.000000000 -0400
@@ -66,7 +66,7 @@
 val string_of_file: in_channel -> string
         (* [string_of_file ic] reads the contents of file [ic] and copies
            them to a string. It stops when encountering EOF on [ic]. *)
-val input_bytes : in_channel -> int -> string;;
+val input_bytes : in_channel -> int -> bytes;;
         (* [input_bytes ic n] reads [n] bytes from [ic] and returns them
            in a new string.  It raises [End_of_file] if EOF is encountered
            before all the bytes are read. *)
@@ -128,10 +128,10 @@
     val create : int -> t
     val length : t -> int
     val get : t -> int -> char
-    val set : t -> int -> char -> unit
-    val blit : t -> int -> t -> int -> int -> unit
+    val set : bytes array -> int -> char -> unit
+    val blit : string array -> int -> bytes array -> int -> int -> unit		
     val output : out_channel -> t -> int -> int -> unit
-    val unsafe_blit_to_string : t -> int -> string -> int -> int -> unit
+    val unsafe_blit_to_string : string array -> int -> bytes -> int -> int -> unit
     val input_bytes : in_channel -> int -> t
   end
 
