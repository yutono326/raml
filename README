
Resource Aware ML
=================

Resource Aware ML (RaML) is a tool that automatically and statically
computes resource-usage bounds for (probabilistic) OCaml programs. For more
information refer to the RaML web site:

  http://raml.co

RaML is being developed by Jan Hoffmann, Shu-Chen Weng, Ankush Das,
Benjamin Lichtman, Chan Ngo, Yue Niu, and others. It also based on
research results by Martin Hofmann, Steffen Jost, and others.

The following files contain additional information:

  CHANGES   contains a change log with respect to earlier version

  ISSUES    conatins a list of know bugs and issues

  LICENSE   contains license information


INSTALLATION
------------

Requirements:

  * OCaml compiler. Version 4.06.0 has been tested.

  * Findlib OCaml library manager (ocamlfind):
    http://projects.camlcity.org/projects/findlib.html

  * Jane Street's Core library (https://github.com/janestreet/core)
    (Versions v0.11.1, v0.11.2, and v0.11.3 have been tested).

  * Coin-or Linear Programming solver (CLP): https://projects.coin-or.org/Clp

  It's strongly recommended installing the first three requirements
  via opam (https://opam.ocaml.org/):

1) Installing opam:

  Linux:

    $ sudo apt-get install opam

  Mac OS X:

    $ brew install opam

    or

    $ port install opam

  Once, you have installed opam, you will be asked to run the
  following commands.

    $ opam init
    $ eval `opam config env`

2) Installing the required libraries and Findlib:

  Once opam is configured, you need to install the requirements.

    $ opam switch install 4.06.0 # Newer versions should likely work
    $ eval `opam config env`
    $ opam install ocamlbuild.0.14.0 core.v0.11.3 # Will pull in all necessary dependencies

3) Installing CLP

  Detailed instructions to install CLP are given at
  https://projects.coin-or.org/Clp

  The easiest way to install CLP is using subversion to download the
  source code and compiling it. The commands are copied here.

    $ cd clp
    $ svn co https://projects.coin-or.org/svn/Clp/stable/1.17 coin-Clp
    $ cd coin-Clp
    $ ./configure -C
    $ make
    $ make test
    $ make install  # Installing locally within the folder; necessary for
                    # getting the header files to the right place.
    $ cd ../..

4) Compiling RaML

  After installing all the requirements (Clp compiled, not necessarily
  installed system-wide), run the configure script with the path to Clp:

    $ ./configure --with-coin-clp /path/to/clp

  Where /path/to/clp should contain lib/ and include/ folder holding the
  library and header files, respectively. If you followed all the above
  instructions, it should look like

    $ ./configure --with-coin-clp clp/coin-Clp

  After configuration, simply run make to compile the main binary and unit
  tests.

    $ make

Clp note:

  If you chose not to install Clp to the system default location, you may have
  to set environment variables to allow loaders to find the dynamic library
  files:

    $ export LD_LIBRARY_PATH=/path/to/clp/lib

  or, on csh/tcsh:

    $ setenv LD_LIBRARY_PATH /path/to/clp/lib

  or, on MacOSX:

    $ export DYLD_LIBRARY_PATH=/path/to/clp/lib


UNIT TESTS
----------

A good way to test if the compilation was successful is the unit_test
binary that is included in the RaML distribution. For a given input
file, it computes bounds for the built-in metrics, evaluates the
program, and compares the resource bounds with the actual cost.

The distribution comes with many unit tests. To execute them, run the
following in the top level directory of the distribution.

  $ make unit_test.opt
  $ ./runtests

If everything compiled correctly then the call

  $ ./runtests

prints the following message at the end of its output.

    ------DONE-------
    All tests passed.
    -----------------


INPUT FILES
-----------

RaML inputs are in OCaml syntax. RaML uses Inria's OCaml parser and
type checker to ensure compatibility. An input file usually ends with
the extension '.raml'. The file should contain a list let bindings;
optionally followed by a main OCaml expression.  Examples can be found
in the following two directories

 ./tests    and    ./examples

There are still a lot of OCaml features that are currently *not
supported*, including:

  - object-oriented language features
  - modules
  - complex inductive data types
  - strings and characters

We are working to shorten this list.


COMMAND LINE USAGE
------------------

For a description of the command-line usage options, run

  ./main usage    or    ./main.opt usage

The resource usage of input programs is defined by resource metrics
that assign a constant cost to each step in a big-step operational
semantics.  There are four built-in metrics:

  - 'heap': number of allocated heap cells
  - 'steps': number of evaluation steps
  - 'ticks': executed tick commands
	- 'flips': number of probabilistic flips

The tick metric allows the user to define a custom resource metric by
annotating the code with tick commands, such as

  Raml.tick(1.3)

The above command defines a resource usage of 1.3 resource units
whenever the expression is executed. The argument of Raml.tick is a
floating point number. A negative number expresses that resources are
returned. The result type of Raml.tick is unit.

The flip metric counts the number of executed probabilistic branches.
The user can implement probabilistic programs via coin flips

  if Rprob.flip(p) then ... else ...

where p could either be a pair (a,b) representing a constant probability
a/(a+b), where both a and b are positive integers, or be an expression
of type Rprob.t for symbolic probabilities. Symbolic probabilities could
come from function arguments, or be created by Rprob.create(a,b).

RaML has two major modes of operation (actions): analysis and
evaluation.

1) Analysis (action analyze)

   The action 'analyze' performs the automatic resource bound
   analysis. It outputs the bounds in form of coefficients of resource
   polynomials and in a simplified form where the bound is described
   as a polynomial in the inputs. RaML supports upper (worst-case)
   bounds, lower (best-case) bounds, and constant-resource bounds
   where upper and lower bounds match. (The term constant-resource
   comes from side-channel analysis and refers to the fact that the
   resource usage is constant for a fixed input size.)

   To analyze a program, the user has to specify the type of bounds
   (the default is upper), a resource metric, and a maximal degree of
   the bounds in the search space.

   There are two modes of the analysis: In main mode, RaML derives a
   constant bound on the cost of evaluating the program, which is
   required to end with a main expression. In module mode, RaML
   derives a bound for each top-level function.

   Main Mode

   The standard analysis mode is the main mode. It computes a bound on
   resource cost of the evaluation of the program and assumes that the
   last expression (or main expression) has the form

     let _ = e       or       ;; e

   RaML provides the option to print the resource-usage information of
   the functions that have been used in the main expression ('-print'
   flag). RaML prints one resource-annotated function type per
   function call. It is possible to print all of these annotated types
   ('-print all') or all annotated types that correspond to function
   calls up to a given depth in the syntax tree ('print level <lev>').

   Module Mode (flag -m)

   In the module mode, RaML infers a resource bound for every
   top-level function in the input file. For a function that has
   higher-order arguments, we assume that the resource cost of calling
   these functions is zero. The idea is, that the resulting bound
   describes the cost of the higher-order function itself.

2) Evaluation (action eval)

   The action 'eval' evaluates the program and returns the value of
   the last expression in the file (main expression). Again, RaML
   assumes that this expression is given in the form

     let _ = e       or       ;; e

   RaML prints the value of main expression. It also measures and
   prints the resource cost as defined by the three built-in metrics
   'heap', 'steps', and 'ticks'.


Below is the output of './main usage' that contains more detailed
information:

Resource Aware ML, Version 1.5.0, June 2020

Usage:
  ./main action [-m] [prog.raml] [func_name]

    prog.raml            Input file.
    -m                   Module mode: print bounds for all toplevel functions.
		func_name            Under the module mode: print the bound for the specified toplevel function.

  If the file name is absent, ./main reads from the standard input.

  Actions:
    eval cost            Evaluate the input program and print resource-usage
                         information for the built-in metrics.

    eval                 Evaluate the input program. Print the return value and
                         resource-usage information for the built-in metrics.

    analyze [mode] <metric> [<d1>] <d2> [-print (all | none | consume | level <lev> )]
                         analyze the input program and print bounds.
                         [mode]      The analysis mode: upper, lower, or constant.
                                     The default mode is upper.
                         <metric>    Metric for the analysis. Built-in metrics
                                     are heap, steps, ticks, and flips.
                         [<d1>] <d2> Maximal degree of the candidate bounds.
                                     RAML successevly looks for bounds of maximal
                                     degree d1, d1+1, ..., d2. If d1 is omitted
                                     then d1 = d2.
                         -print      Print the types used in function applications.
                                     all          Print all.
                                     none         Print none.
                                     consume      Print types of consume functions.
                                     level <lev>  Print types withing depth <lev> in
                                                  the syntax tree.

    usage                Print this message.
    gen-runtime          Generates the raml runtime
    version              Print version information.
    typecheck            Typecheck the input program.
    print simple[+t]     Print simplified syntax tree [with types].
    print sharelet[+t]   Print syntax tree in share-let-normal form [with types].

  Example usage:
    ./main analyze heap 4
    ./main analyze lower heap 2 bfs.raml
    ./main analyze steps 3 -print level 1 -m quicksort.raml
    ./main eval quicksort.raml
