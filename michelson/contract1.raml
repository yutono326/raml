exception Invalid_argument

type t =
  Int of int | Nat of Rnat.t | MString | Mutez | Bool of bool | Keyhash | Timestamp | Address | Unit | MNone | MSome of t | LNil | LCons of t * t | SNil | SCons of t * t | Operation | TransferTokens | Contract | Pair of t * t | Left of t | Right of t | MNil | MCons of t * t * t

let rec sr n i =
  Rnat.ifz i
    (fun () -> n)
    (fun i' -> sr (n/.2.0) i')

(*let rec numbits_aux a n =
  Rnat.ifz n
    (fun () -> 0)
    (fun n' ->
      Rnat.ifz n'
        (fun () -> a + 1)
        (fun n'' -> numbits_aux (a+1) (n/2))

let numbits n = numbits_aux 0 n

let z_bytes n = (7 + (numbits n)) / 8*)

let max (m: int) (n : int) =
  if m >= n then m else m


let failwith s = raise Invalid_argument

let nop s = Raml.tick(70.0); s

let (|>) f g = fun s -> Raml.tick(60.0); g (f s)

let if_ bt bf s =
  match s with
  | Bool b :: xs -> Raml.tick(60.0); if b then bt xs else bf xs
  | _ ->  raise Invalid_argument

let rec loop_aux n body s =
  Rnat.ifz n
    (fun () -> s)
    (fun n' ->
      match (body s) with
      | _ :: xs -> loop_aux n' body xs
      | _ -> raise Invalid_argument)

let loop n body s =
  match s with
  | _ :: xs -> Raml.tick(70.0); loop_aux n body xs
  | _ -> raise Invalid_argument

let rec loop_left_aux n body s =
  Rnat.ifz n
    (fun () -> s)
    (fun n' ->
      match (body s) with
      | Left a :: xs -> loop_aux n' body (a :: xs)
      | Right b :: xs -> b :: xs
      | _ -> raise Invalid_argument)

let loop_left body s =
  match s with
  | Left a :: xs -> Raml.tick(80.0); loop_left_aux (Rnat.of_int 10) body (a :: xs)
  | Right b :: xs -> Raml.tick(80.0); b :: xs
  | _ -> raise Invalid_argument

let rec dip n body s =
  Rnat.ifz n
    (fun () -> Raml.tick(100.0); body s)
    (fun n' ->
      match s with
      | x :: xs -> Raml.tick(4.0); x :: (dip n' body xs)
      | _ -> raise Invalid_argument)

let rec drop n s =
  Rnat.ifz n
    (fun () -> Raml.tick(100.0); s)
    (fun n' ->
      match s with
      | _ :: xs -> Raml.tick(4.0); drop n' xs
      | _ -> raise Invalid_argument)

let dup s =
  match s with
  | x :: xs -> Raml.tick(80.0); x :: x :: xs
  | _ -> raise Invalid_argument

let swap s =
  match s with
  | x :: y :: xs -> Raml.tick(70.0); y :: x :: xs
  | _ -> raise Invalid_argument

let rec dig_aux n s =
  Rnat.ifz n
    (fun () ->
      match s with
      | x :: xs -> Raml.tick(100.0); x, xs
      | _ -> raise Invalid_argument)
    (fun n' ->
      match s with
      | x :: xs -> Raml.tick(4.0);
        let x', xs' = dig_aux n' xs in
        x', x :: xs'
      | [] -> raise Invalid_argument)

let dig n s =
  let x, xs = dig_aux n s in x :: xs

let rec dug_aux elm n s =
  Rnat.ifz n
    (fun () -> Raml.tick(100.0); elm :: s)
    (fun n' ->
      match s with
      | x :: xs -> Raml.tick(4.0); x :: (dug_aux elm n' xs)
      | _ -> raise Invalid_argument)

let dug n s =
  match s with
  | x :: xs -> dug_aux x n xs
  | _ -> raise Invalid_argument

let push elm s = Raml.tick(80.0); elm :: s

let unit s = Unit :: s

let eq s =
  match s with
  | Int i :: xs -> Raml.tick(80.0); Bool (i = 0) :: xs
  | _ -> raise Invalid_argument

let neq s =
  match s with
  | Int i :: xs -> Raml.tick(80.0); Bool (not (i = 0)) :: xs
  | _ -> raise Invalid_argument

let lt s =
  match s with
  | Int i :: xs -> Raml.tick(80.0); Bool (i < 0) :: xs
  | _ -> raise Invalid_argument

let gt s =
  match s with
  | Int i :: xs -> Raml.tick(80.0); Bool (i > 0) :: xs
  | _ -> raise Invalid_argument

let le s =
  match s with
  | Int i :: xs -> Raml.tick(80.0); Bool (i <= 0) :: xs
  | _ -> raise Invalid_argument

let ge s =
  match s with
  | Int i :: xs -> Raml.tick(80.0); Bool (i >= 0) :: xs
  | _ -> raise Invalid_argument

let or_ s =
  match s with
  | Bool bx :: Bool by :: xs -> Raml.tick(90.0); Bool (bx || by) :: xs
  | _ -> raise Invalid_argument

let and_ s =
  match s with
  | Bool bx :: Bool by :: xs -> Raml.tick(100.0); Bool (bx && by) :: xs
  | _ -> raise Invalid_argument

let xor s =
  match s with
  | Bool bx :: Bool by :: xs -> Raml.tick(100.0); Bool ((bx || by) && (not bx || not by)) :: xs
  | _ -> raise Invalid_argument

let not_ s =
  match s with
  | Bool b :: xs -> Raml.tick(90.0); Bool (not b) :: xs
  | _ ->  raise Invalid_argument

let neg s =
  match s with
  | Int i :: xs -> Raml.tick(80.0); Int (-i) :: xs
  | Nat n :: xs -> Raml.tick(80.0); Int (-(Rnat.to_int n)) :: xs
  | _ -> raise Invalid_argument

let abs s =
  match s with
  | Int i :: xs -> Raml.tick(80.0);
    if i >= 0 then Nat (Rnat.of_int i) :: xs else Nat (Rnat.of_int (-i)) :: xs
  | _ -> raise Invalid_argument

let isnat s =
  match s with
  | Int i :: xs -> Raml.tick(80.0);
    if i >= 0 then MSome (Nat (Rnat.of_int i)) :: xs else MNone :: xs
  | _ -> raise Invalid_argument

let int s =
  match s with
  | Nat n :: xs -> Raml.tick(80.0); Int (Rnat.to_int n) :: xs
  | _ -> raise Invalid_argument


let add s =
  match s with
  | Int ix :: Int iy :: xs -> Raml.tick(80.0); Int (ix + iy) :: xs
  | Int ix :: Nat iy :: xs -> Raml.tick(80.0); Int (ix + (Rnat.to_int iy)) :: xs
  | Nat ix :: Int iy :: xs -> Raml.tick(80.0); Int ((Rnat.to_int ix) + iy) :: xs
  | Nat ix :: Nat iy :: xs -> Raml.tick(80.0); Nat (Rnat.add ix iy) :: xs
  | _ -> raise Invalid_argument

let sub s =
  match s with
  | Int ix :: Int iy :: xs -> Raml.tick(80.0); Int (ix - iy) :: xs
  | Int ix :: Nat iy :: xs -> Raml.tick(80.0); Int (ix - (Rnat.to_int iy)) :: xs
  | Nat ix :: Int iy :: xs -> Raml.tick(80.0); Int ((Rnat.to_int ix) - iy) :: xs
  | Nat ix :: Nat iy :: xs -> Raml.tick(80.0); Int ((Rnat.to_int ix) - (Rnat.to_int iy)) :: xs
  | _ -> raise Invalid_argument

let mult s =
  match s with
  | Int ix :: Int iy :: xs -> Raml.tick(80.0); Int (ix * iy) :: xs
  | Int ix :: Nat iy :: xs -> Raml.tick(80.0); Int (ix * (Rnat.to_int iy)) :: xs
  | Nat ix :: Int iy :: xs -> Raml.tick(80.0); Int ((Rnat.to_int ix) * iy) :: xs
  | Nat ix :: Nat iy :: xs -> Raml.tick(80.0); Nat (Rnat.mult ix iy):: xs
  | _ -> raise Invalid_argument

let ediv s =
  match s with
  | Int ix :: Int iy :: xs -> Raml.tick(300.0);
    if iy = 0 then MNone :: xs else MSome (Pair (Int (ix / iy), Nat (Rnat.of_int (ix mod iy)))) :: xs
  | Int ix :: Nat iy :: xs -> Raml.tick(300.0);
    Rnat.ifz iy
      (fun () -> MNone :: xs)
      (fun n' -> MSome (Pair (Int (ix / (Rnat.to_int iy)), Nat (Rnat.of_int (ix mod (Rnat.to_int iy))))) :: xs)
  | Nat ix :: Int iy :: xs -> Raml.tick(300.0);
    if iy = 0 then MNone :: xs else MSome (Pair (Int ((Rnat.to_int ix) / iy), Nat (Rnat.of_int ((Rnat.to_int ix) mod iy)))) :: xs
  | Nat ix :: Nat iy :: xs -> Raml.tick(300.0);
    Rnat.ifz iy
      (fun () -> MNone :: xs)
      (fun n' -> let (d, m, _) = Rnat.div_mod ix iy in MSome (Pair (Nat d, Nat m)) :: xs)
  | _ -> raise Invalid_argument

let rec compare s =
  match s with
  | Int ix :: Int iy :: xs -> Raml.tick(150.0); begin
    if ix < iy then Int (-1) :: xs else begin
      if ix = iy then Int 0 :: xs else Int 1 :: xs
    end
  end
  | Nat ix :: Nat iy :: xs -> Raml.tick(150.0); begin
    if Rnat.to_int ix < Rnat.to_int iy then Int (-1) :: xs else begin
      if Rnat.to_int ix = Rnat.to_int iy then Int 0 :: xs else Int 1 :: xs
    end
  end
  | _ -> raise Invalid_argument

let pair s =
  match s with
  | x :: y :: xs -> Raml.tick(80.0); (Pair (x, y)) :: xs
  | _ -> raise Invalid_argument

let car s =
  match s with
  | Pair (a, _) :: xs -> Raml.tick(80.0); a :: xs
  | _ -> raise Invalid_argument

let cdr s =
  match s with
  | Pair (_, b) :: xs -> Raml.tick(80.0); b :: xs
  | _ -> raise Invalid_argument

let compare_pair s =
  match s with
  | Pair (xa, xb) :: Pair (ya, yb) :: xs -> begin
    match xa, xb, ya, yb with
    | Int ixa, Int ixb, Int iya, Int iyb -> Raml.tick(150.0); begin
      if ixa = iya then compare (xb :: yb :: xs) else compare (xa :: ya :: xs)
    end
    | Nat ixa, Nat ixb, Nat iya, Nat iyb -> Raml.tick(150.0); begin
      if Rnat.to_int ixa = Rnat.to_int iya then compare (xb :: yb :: xs) else compare (xa :: ya :: xs)
    end
    | _ -> raise Invalid_argument
  end
  | _ -> raise Invalid_argument

let empty_set s = Raml.tick(240.0); SNil :: s

let rec mem_set_aux t hd tl =
  match (compare (t :: hd :: []))  with
  | Int n :: [] ->
    if n = 1 then begin
      match tl with
      | SNil -> Bool false
      | SCons (hd', tl') -> mem_set_aux t hd' tl'
      | _ -> raise Invalid_argument
    end else begin
      if n = 0 then Bool true else Bool false
    end
  | _ -> raise Invalid_argument

let mem_set s =
  match s with
  | _ :: SNil :: xs -> Raml.tick(80.0); Bool false :: xs
  | t :: SCons (hd, tl) :: xs -> Raml.tick(80.0); mem_set_aux t hd tl :: xs
  | _ -> raise Invalid_argument

let rec update_set_aux1 t hd tl =
  match (compare (t :: hd :: [])) with
  | Int n :: [] ->
    if n = 1 then begin
      match tl with
      | SNil -> SCons (hd, SCons (t, SNil))
      | SCons (hd', tl') -> SCons (hd, update_set_aux1 t hd' tl')
      | _ -> raise Invalid_argument
    end else begin
      if n = 0 then SCons (hd, tl) else SCons (t, SCons (hd, tl))
    end
  | _ -> raise Invalid_argument

let rec update_set_aux2 t hd tl =
  match (compare (t :: hd :: [])) with
  | Int n :: [] ->
    if n = 1 then begin
      match tl with
      | SNil -> SCons (hd, SNil)
      | SCons (hd', tl') -> SCons (hd, update_set_aux2 t hd' tl')
      | _ -> raise Invalid_argument
    end else begin
      if n = 0 then SCons (tl, SNil) else SCons (hd, tl)
    end
  | _ -> raise Invalid_argument

let update_set s =
  match s with
  | t :: Bool b :: SNil :: xs -> Raml.tick(80.0);
    if b then SCons (t, SNil) :: xs else SNil :: xs
  | t :: Bool b :: SCons (hd, tl) :: xs -> Raml.tick(80.0);
    if b then (update_set_aux1 t hd tl) :: xs else (update_set_aux2 t hd tl) :: xs
  | _ -> raise Invalid_argument

let rec iter_set_aux body hd tl s =
  match tl with
  | SNil -> Raml.tick(36.0); body (hd :: s)
  | SCons (hd', tl') -> Raml.tick(36.0); iter_set_aux body hd' tl' (body (hd :: s))
  | _ -> raise Invalid_argument

let iter_set body s =
  match s with
  | SNil :: xs -> Raml.tick(80.0); xs
  | SCons (hd, tl):: xs -> Raml.tick(80.0); iter_set_aux body hd tl xs
  | _ -> raise Invalid_argument

let rec size_set_aux tl =
  match tl with
  | SNil -> Rnat.zero
  | SCons (_, tl') -> Rnat.add (Rnat.of_int 1) (size_set_aux tl')
  | _ -> raise Invalid_argument

let size_set s =
  match s with
  | SNil :: xs -> Raml.tick(80.0); Nat Rnat.zero :: xs
  | SCons (_, tl) :: xs -> Raml.tick(80.0); Nat (Rnat.add (Rnat.of_int 1) (size_set_aux tl)) :: xs
  | _ -> raise Invalid_argument

let empty_map s = Raml.tick(240.0); MNil :: s

let rec get_map_aux t k v tl =
  match (compare (t :: k :: [])) with
  | Int n :: [] -> begin
    if n = 1 then begin
      match tl with
      | MNil -> MNone
      | MCons (k', v', tl') -> get_map_aux t k' v' tl'
      | _ -> raise Invalid_argument
    end else begin
      if n = 0 then MSome v else MNone
    end
  end
  | _ -> raise Invalid_argument

let get_map s =
  match s with
  | _ :: MNil :: xs -> Raml.tick(80.0); MNone :: xs
  | t :: MCons (k, v, tl) :: xs -> Raml.tick(80.0); get_map_aux t k v tl :: xs
  | _ -> raise Invalid_argument

let rec mem_map_aux t k v tl =
  match (compare (t :: k :: [])) with
  | Int n :: [] -> begin
    if n = 1 then begin
      match tl with
      | MNil -> Bool false
      | MCons (k', v', tl') -> mem_map_aux t k' v' tl'
      | _ -> raise Invalid_argument
    end else begin
      if n = 0 then Bool true else Bool false
    end
  end
  | _ -> raise Invalid_argument

let mem_map s =
  match s with
  | _ :: MNil :: xs -> Raml.tick(80.0); Bool false :: xs
  | t :: MCons (k, v, tl) :: xs -> Raml.tick(80.0); mem_map_aux t k v tl :: xs
  | _ -> raise Invalid_argument

let rec update_map_aux1 t k v tl =
  match (compare (t :: k :: [])) with
  | Int n :: [] -> begin
    if n = 1 then begin
      match tl with
      | MNil -> MCons (k, v, MNil)
      | MCons (k', v', tl') -> MCons (k, v, update_map_aux1 t k' v' tl')
      | _ -> raise Invalid_argument
    end else begin
      if n = 0 then tl else MCons (k, v, tl)
    end
  end
  | _ -> raise Invalid_argument

let rec update_map_aux2 t x k v tl =
  match (compare (t :: k :: [])) with
  | Int n :: [] -> begin
    if n = 1 then begin
      match tl with
      | MNil -> MCons (k, v, MCons (t, x, tl))
      | MCons (k', v', tl') -> MCons (k, v, update_map_aux2 t x k' v' tl')
      | _ -> raise Invalid_argument
    end else begin
      if n = 0 then MCons (k, x, tl) else MCons (t, x, MCons (k, v, tl))
    end
  end
  | _ -> raise Invalid_argument

let update_map s =
  match s with
  | _ :: MNone :: MNil :: xs -> Raml.tick(80.0); MNil :: xs
  | t :: MSome x :: MNil :: xs -> Raml.tick(80.0); MCons (t, x, MNil) :: xs
  | t :: MNone :: MCons (k, v, tl) :: xs -> Raml.tick(80.0); update_map_aux1 t k v tl :: xs
  | t :: MSome x :: MCons (k, v, tl) :: xs -> Raml.tick(80.0); update_map_aux2 t x k v tl :: xs
  | _ -> raise Invalid_argument

(*let rec map_map_aux body k v tl s =
  match tl with
  | MNil -> begin
    match (body (Pair (k, v) :: s)) with
    | [] -> raise Invalid_argument
    | v' :: xs' -> Raml.tick(761.0); MCons (k, v', MNil) :: xs'
  end
  | MCons (k', v', tl') -> begin
    match (body (Pair (k, v) :: s)) with
    | [] -> raise Invalid_argument
    | v' :: xs' -> begin
      match (map_map_aux body k' v' tl' xs') with
      | [] -> raise Invalid_argument
      | tl'' :: xs'' -> Raml.tick(761.0); MCons (k, v', tl'') :: xs''
    end
  end
  | _ -> raise Invalid_argument

let map_map body s =
  match s with
  | MNil :: xs -> Raml.tick(80.0); s
  | MCons (k, v, tl) :: xs -> Raml.tick(80.0); map_map_aux body k v tl xs
  | _ -> raise Invalid_argument*)

let rec iter_map_aux body k v tl s =
  match tl with
  | MNil -> Raml.tick(40.0); body (Pair (k, v) :: s)
  | MCons (k', v', tl') -> Raml.tick(40.0); iter_map_aux body k' v' tl' (body (Pair (k, v) :: s))
  | _ -> raise Invalid_argument

let iter_map body s =
  match s with
  | MNil :: xs -> Raml.tick(80.0); xs
  | MCons (k, v, tl) :: xs -> Raml.tick(80.0); iter_map_aux body k v tl xs
  | _ -> raise Invalid_argument

let rec size_map_aux tl =
  match tl with
  | MNil -> Rnat.zero
  | MCons (_, _, tl') -> Rnat.add (Rnat.of_int 1) (size_map_aux tl')
  | _ -> raise Invalid_argument

let size_map s =
  match s with
  | MNil :: xs -> Raml.tick(90.0); Nat (Rnat.zero) :: xs
  | MCons (_, _, tl) :: xs -> Raml.tick(90.0); Nat (Rnat.add (Rnat.of_int 1) (size_map_aux tl)) :: xs
  | _ -> raise Invalid_argument

let some s =
  match s with
  | x :: xs -> Raml.tick(80.0); MSome x :: xs
  | _ -> raise Invalid_argument

let none s = Raml.tick(80.0); MNone :: s

let if_none bt bf s =
  match s with
  | MNone :: xs -> Raml.tick(80.0); bt xs
  | MSome x :: xs -> Raml.tick(80.0); bf (x :: xs)
  | _ -> raise Invalid_argument

let left s =
  match s with
  | x :: xs -> Raml.tick(80.0); Left x :: xs
  | _ -> raise Invalid_argument

let right s =
  match s with
  | x :: xs -> Raml.tick(80.0); Right x :: xs
  | _ -> raise Invalid_argument

let if_left bt bf s =
  match s with
  | Left a :: xs -> Raml.tick(90.0); bt (a :: xs)
  | Right b :: xs -> Raml.tick(90.0); bf (b :: xs)
  | _ -> raise Invalid_argument

let cons s =
  match s with
  | x :: y :: xs -> Raml.tick(80.0); (LCons (x, y)) :: xs
  | _ -> raise Invalid_argument

let nil s = Raml.tick(80.0); LNil :: s

let if_cons bt bf s =
  match s with
  | LNil :: xs -> Raml.tick(110.0); bf xs
  | LCons (hd, tl) :: xs -> Raml.tick(110.0); bt (hd :: tl :: xs)
  | _ -> raise Invalid_argument

let rec map_list_aux body hd tl s =
  match tl with
  | LNil -> begin
    match (body (hd :: s)) with
    | [] -> raise Invalid_argument
    | x' :: xs' -> Raml.tick(12.0); LCons (x', LNil) :: xs'
  end
  | LCons (hd', tl') -> begin
    match (body (hd :: s)) with
    | [] -> raise Invalid_argument
    | x' :: xs' -> begin
      match (map_list_aux body hd' tl' xs') with
      | [] -> raise Invalid_argument
      | x'' :: xs'' -> Raml.tick(12.0); LCons (x', x'') :: xs''
    end
  end
  | _ -> raise Invalid_argument

let map_list body s =
  match s with
  | LNil :: xs -> Raml.tick(500.0); s
  | LCons (hd, tl) :: xs -> Raml.tick(500.0); map_list_aux body hd tl xs
  | _ -> raise Invalid_argument

let rec size_list_aux tl =
  match tl with
  | LNil -> Rnat.zero
  | LCons (_, tl') -> Rnat.add (Rnat.of_int 1) (size_list_aux tl')
  | _ -> raise Invalid_argument

let size_list s =
  match s with
  | LNil :: xs -> Raml.tick(80.0); Nat (Rnat.zero) :: xs
  | LCons (_, tl) :: xs -> Raml.tick(80.0); Nat (Rnat.add (Rnat.of_int 1) (size_list_aux tl)) :: xs
  | _ -> raise Invalid_argument


let rec iter_list_aux body hd tl s =
  match tl with
  | LNil -> Raml.tick(7.0); body (hd :: s)
  | LCons (hd', tl') -> Raml.tick(7.0); iter_list_aux body hd' tl' (body (hd :: s))
  | _ -> raise Invalid_argument

let iter_list body s =
  match s with
  | LNil :: xs -> Raml.tick(500.0); xs
  | LCons (hd, tl) :: xs -> Raml.tick(500.0); iter_list_aux body hd tl xs
  | _ -> raise Invalid_argument


let contract s =
  match s with
  | Address :: xs -> Raml.tick(80.0);
    if true then MSome Contract :: xs else MNone :: xs
  | _ -> raise Invalid_argument

let transfer_tokens s =
  match s with
  | _ :: Mutez :: Contract :: xs -> Raml.tick(160.0); TransferTokens :: xs
  | _ -> raise Invalid_argument


(* https://better-call.dev/delphinet/KT1DtE3TQXS8L1NNg1xxWCXJB4nWKHEeiFbR/code *)

let _ =
  ( nil |>
    dig (Rnat.of_int 1) |>
    dup |> car |> dip (Rnat.of_int 1) cdr |>
    drop (Rnat.of_int 1) |>
    push Address |>
    contract |>
    if_none (push MString |> failwith) nop |>
    push Address |>
    contract |>
    if_none (push MString |> failwith) nop |>
    dig (Rnat.of_int 3) |>
    dup |>
    dug (Rnat.of_int 4) |>
    dig (Rnat.of_int 2) |>
    dup |>
    dug (Rnat.of_int 3) |>
    push Mutez |>
    push Unit |>
    transfer_tokens |>
    cons |>
    dip (Rnat.of_int 1) (dig (Rnat.of_int 3) |> drop (Rnat.of_int 1)) |>
    dug (Rnat.of_int 3) |>
    dig (Rnat.of_int 3) |>
    dup |>
    dug (Rnat.of_int 4) |>
    dig (Rnat.of_int 1) |>
    dup |>
    dug (Rnat.of_int 2) |>
    push Mutez |>
    push Unit |>
    transfer_tokens |>
    cons |>
    dip (Rnat.of_int 1) (dig (Rnat.of_int 3) |> drop (Rnat.of_int 1)) |>
    dug (Rnat.of_int 3) |>
    drop (Rnat.of_int 2) |>
    dig (Rnat.of_int 1) |>
    pair
  )
  (Pair (Unit, Unit) :: [])
