type ct =
  Int of int | Nat of Rnat.t | String | Bool of bool

and t =
  Failed | Ct of ct | Unit | None | Some of t | LNil | LCons of t * t | Set of ct list | Operation | Pair of t * t

let rec seq body s =
  match body with
  | [] -> s
  | op :: l -> seq l (op s)


let dip1 code s =
  match s with
  | [] | Failed :: _ -> Failed :: []
  | x :: xs -> x :: seq code xs


let dup s =
  match s with
  | [] | Failed :: _ -> Failed :: []
  | x :: xs -> x :: x :: xs


let swap s =
  match s with
  | Failed :: _ -> Failed :: []
  | x :: y :: xs -> y :: x :: xs
  | _ -> Failed :: []


let add s =
  match s with
  | Ct Int ix :: Ct Int iy :: xs -> Ct (Int (ix + iy)) :: xs
  | _ -> Failed :: []


let pair s =
  match s with
  | Failed :: _ -> Failed :: []
  | x :: y :: xs ->  Pair (x, y) :: xs
  | _ -> Failed :: []


let car s =
  match s with
  | Pair (a, _) :: xs -> a :: xs
  | _ -> Failed :: []


let cdr s =
  match s with
  | Pair (_, b) :: xs -> b :: xs
  | _ -> Failed :: []

let nil s =
  match s with
  | Failed :: _ -> Failed :: []
  | _ -> LNil :: s


let _ =
   seq [car; dup; car; swap; cdr; add; nil; pair]
   [Pair (Pair (Ct (Int 3), Ct (Int 5)) ,Ct (Int 0))]
