exception Invalid_argument

type ct =
  Int of int | Nat of Rnat.t | String | Mutez of Rnat.t | Bool of bool | Keyhash of int | Timestamp of int | Address of int

and t =
  Failed | Ct of ct | Unit | None | Some of t | LNil | LCons of t * t | Set of ct list | Operation | Contract of t | Pair of t * t


let failwith s = Failed :: []


let rec seq body s =
  match body with
  | [] -> s
  | op :: l -> seq l (op s)


(*let if_ bt bf s =
  match s with
  | Ct Bool b :: xs -> if b then seq bt xs else seq bf xs
  | _ ->  Failed :: []


let rec loop_aux n body s =
  Rnat.ifz n
    (fun () -> s)
    (fun n' ->
      let s' = seq body s in
      match s' with
      | Ct Bool b :: xs -> if b then loop_aux n' body xs else xs
      | _ -> Failed :: [])


let loop n body s =
  match s with
  | Ct Bool b :: xs -> if b then loop_aux n body xs else xs
  | _ -> Failed :: []


let dip1 code s =
  match s with
  | [] | Failed :: _ -> Failed :: []
  | x :: xs -> x :: seq code xs

let rec dip n code s =
  Rnat.ifz n
    (fun () -> code s)
    (fun n' ->
      match s with
      | [] | Failed :: _ -> Failed :: []
      | x :: xs -> x :: dip n' code xs)


let drop1 s =
  match s with
  | [] | Failed :: _ -> Failed :: []
  | _ :: xs -> xs


let rec drop n s =
  match s with
  | [] | Failed :: _ -> Failed :: []
  | _ :: xs ->
    Rnat.ifz n
      (fun () -> s)
      (fun n' -> drop n' xs)


let dup s =
  match s with
  | [] | Failed :: _ -> Failed :: []
  | x :: xs -> x :: x :: xs


let swap s =
  match s with
  | Failed :: _ -> Failed :: []
  | x :: y :: xs -> y :: x :: xs
  | _ -> Failed :: []


let rec append l1 l2 =
  match l1 with
  | [] -> l2
  | x::xs -> x::(append xs l2)

let rec dig_aux n s' s =
  Rnat.ifz n
    (fun () -> begin
      match s with
      | [] | Failed :: _ -> Failed :: []
      | x :: xs -> append (x :: s') xs
    end)
    (fun n' -> begin
      match s with
      | [] | Failed :: _ -> Failed :: []
      | x :: xs -> dig_aux n' (append s' [x]) xs
    end)

let dig n s = dig_aux n [] s


let rec dug n s =
  Rnat.ifz n
    (fun () -> s)
    (fun n' -> begin
      match s with
      | Failed :: _ -> Failed :: []
      | x :: y :: xs -> y :: dug n' (x :: xs)
      | _ -> Failed :: []
    end)


let push x s =
  match s with
  | Failed :: _ -> Failed :: []
  | _ -> x :: s


let unit s =
  match s with
  | Failed :: _ -> Failed :: []
  | _ -> Unit :: s


let eq s =
  match s with
  | Ct Int i :: xs ->
    if i = 0 then Ct (Bool true) :: xs else Ct (Bool false) :: xs
  | _ -> Failed :: []


let neq s =
  match s with
  | Ct Int i :: xs ->
    if i = 0 then Ct (Bool false) :: xs else Ct (Bool true) :: xs
  | _ -> Failed :: []


let lt s =
  match s with
  | Ct Int i :: xs ->
    if i < 0 then Ct (Bool true) :: xs else Ct (Bool false) :: xs
  | _ -> Failed :: []


let gt s =
  match s with
  | Ct Int i :: xs ->
    if i > 0 then Ct (Bool true) :: xs else Ct (Bool false) :: xs
  | _ -> Failed :: []


let le s =
  match s with
  | Ct Int i :: xs ->
    if i <= 0 then Ct (Bool true) :: xs else Ct (Bool false) :: xs
  | _ -> Failed :: []


let ge s =
  match s with
  | Ct Int i :: xs ->
    if i >= 0 then Ct (Bool true) :: xs else Ct (Bool false) :: xs
  | _ -> Failed :: []


let or_ s =
  match s with
  | Ct Bool bx :: Ct Bool by :: xs -> Ct (Bool (bx || by)) :: xs
  | _ -> Failed :: []


let and_ s =
  match s with
  | Ct Bool bx :: Ct Bool by :: xs -> Ct (Bool (bx && by)) :: xs
  | _ -> Failed :: []


let xor s =
  match s with
  | Ct Bool bx :: Ct Bool by :: xs -> Ct (Bool ((bx || by) && (not bx || not by))) :: xs
  | _ -> Failed :: []


let not_ s =
  match s with
  | Ct Bool b :: xs -> Ct (Bool (not b)) :: xs
  | _ ->  Failed :: []


let neg s =
  match s with
  | Ct Int i :: xs -> Ct (Int (-i)) :: xs
  | Ct Nat i :: xs -> Ct (Int (-(Rnat.to_int i))) :: xs
  | _ -> Failed :: []


let abs s =
  match s with
  | Ct Int i :: xs ->
    if i >= 0 then Ct (Nat (Rnat.of_int i)) :: xs else Ct (Nat (Rnat.of_int(-i))) :: xs
  | _ -> Failed :: []


let isnat s =
  match s with
  | Ct Int i :: xs ->
    if i >= 0 then Some (Ct (Nat (Rnat.of_int i))) :: xs else None :: xs
  | _ -> Failed :: []


let int s =
  match s with
  | Ct Nat i :: xs -> Ct (Int (Rnat.to_int i)) :: xs
  | _ -> Failed :: []


let add s =
  match s with
  | Ct Int ix :: Ct Int iy :: xs -> Raml.tick(1.0); Ct (Int (ix + iy)) :: xs
  | Ct Int ix :: Ct Nat iy :: xs -> Raml.tick(1.0); Ct (Int (ix + (Rnat.to_int iy))) :: xs
  | Ct Nat ix :: Ct Int iy :: xs -> Raml.tick(1.0); Ct (Int ((Rnat.to_int ix) + iy)) :: xs
  | Ct Nat ix :: Ct Nat iy :: xs -> Raml.tick(1.0); Ct (Nat (Rnat.add ix iy)) :: xs
  | Ct Timestamp tx :: Ct Int iy :: xs -> Raml.tick(1.0); Ct (Timestamp (tx + iy)) :: xs
  | Ct Int ix :: Ct Timestamp ty :: xs -> Raml.tick(1.0); Ct (Timestamp (ix + ty)) :: xs
  | Ct Mutez mx :: Ct Mutez my :: xs -> Raml.tick(1.0); Ct (Mutez (Rnat.add mx my)) :: xs
  | _ -> Failed :: []


let sub s =
  match s with
  | Ct Int ix :: Ct Int iy :: xs -> Raml.tick(1.0); Ct (Int (ix - iy)) :: xs
  | Ct Int ix :: Ct Nat iy :: xs -> Raml.tick(1.0); Ct (Int (ix - (Rnat.to_int iy))) :: xs
  | Ct Nat ix :: Ct Int iy :: xs -> Raml.tick(1.0); Ct (Int ((Rnat.to_int ix) - iy)) :: xs
  | Ct Nat ix :: Ct Nat iy :: xs -> Raml.tick(1.0); Ct (Int ((Rnat.to_int ix) - (Rnat.to_int iy))) :: xs
  | Ct Timestamp tx :: Ct Int iy :: xs -> Raml.tick(1.0); Ct (Timestamp (tx - iy)) :: xs
  | Ct Timestamp tx :: Ct Timestamp ty :: xs -> Raml.tick(1.0); Ct (Timestamp (tx - ty)) :: xs
  | Ct Mutez mx :: Ct Mutez my :: xs -> Raml.tick(1.0);
    let (m, _) = Rnat.minus mx my in Ct (Mutez m) :: xs
  | _ -> Failed :: []


let mult s =
  match s with
  | Ct Int ix :: Ct Int iy :: xs -> Raml.tick(1.0); Ct (Int (ix * iy)) :: xs
  | Ct Int ix :: Ct Nat iy :: xs -> Raml.tick(1.0); Ct (Int (ix * (Rnat.to_int iy))) :: xs
  | Ct Nat ix :: Ct Int iy :: xs -> Raml.tick(1.0); Ct (Int ((Rnat.to_int ix) * iy)) :: xs
  | Ct Nat ix :: Ct Nat iy :: xs -> Raml.tick(1.0); Ct (Nat (Rnat.mult ix iy)) :: xs
  | Ct Mutez mx :: Ct Nat iy :: xs -> Raml.tick(1.0); Ct (Mutez (Rnat.mult mx iy)) :: xs
  | Ct Nat ix :: Ct Mutez my :: xs -> Raml.tick(1.0); Ct (Mutez (Rnat.mult ix my)) :: xs
  | _ -> Failed :: []

let ediv s =
  match s with
  | Ct Int ix :: Ct Int iy :: xs ->
    if iy = 0 then None :: xs else Some (Pair (Ct (Int (ix / iy)), Ct (Nat (Rnat.of_int (ix mod iy))))) :: xs
  | Ct Int ix :: Ct Nat iy :: xs ->
    Rnat.ifz iy
      (fun () -> None :: xs)
      (fun n' -> Some (Pair (Ct (Int (ix / (Rnat.to_int iy))), Ct (Nat (Rnat.of_int (ix mod (Rnat.to_int iy)))))) :: xs)
  | Ct Nat ix :: Ct Int iy :: xs ->
    if iy = 0 then None :: xs else Some (Pair (Ct (Int ((Rnat.to_int ix) / iy)), Ct (Nat (Rnat.of_int ((Rnat.to_int ix) mod iy))))) :: xs
  | Ct Nat ix :: Ct Nat iy :: xs ->
    Rnat.ifz iy
      (fun () -> None :: xs)
      (fun n' -> let (d, m, _) = Rnat.div_mod ix iy in Some (Pair (Ct (Nat d), Ct (Nat m))) :: xs)
  | Ct Mutez mx :: Ct Nat iy :: xs ->
    Rnat.ifz iy
      (fun () -> None :: xs)
      (fun n' -> let (d, m, _) = Rnat.div_mod mx iy in Some (Pair (Ct (Mutez d), Ct (Mutez m))) :: xs)
  | Ct Mutez mx :: Ct Mutez my :: xs ->
    Rnat.ifz my
      (fun () -> None :: xs)
      (fun n' -> let (d, m, _) = Rnat.div_mod mx my in Some (Pair (Ct (Nat d), Ct (Mutez m))) :: xs)
  | _ -> Failed :: []


let rec compare s =
  match s with
  | Ct Int ix :: Ct Int iy :: xs -> begin
    if ix < iy then Ct (Int (-1)) :: xs else begin
      if ix = iy then Ct (Int 0) :: xs else Ct (Int 1) :: xs
    end
  end
  | Ct Nat ix :: Ct Nat iy :: xs -> begin
    if Rnat.to_int ix < Rnat.to_int iy then Ct (Int (-1)) :: xs else begin
      if Rnat.to_int ix = Rnat.to_int iy then Ct (Int 0) :: xs else Ct (Int 1) :: xs
    end
  end
  | Ct Timestamp tx :: Ct Timestamp ty :: xs -> begin
    if tx < ty then Ct (Int (-1)) :: xs else begin
      if tx = ty then Ct (Int 0) :: xs else Ct (Int 1) :: xs
    end
  end
  | Ct Mutez mx :: Ct Mutez my :: xs -> begin
    if Rnat.to_int mx < Rnat.to_int my then Ct (Int (-1)) :: xs else begin
      if Rnat.to_int mx = Rnat.to_int my then Ct (Int 0) :: xs else Ct (Int 1) :: xs
    end
  end
  | _ -> Failed :: []


let pair s =
  match s with
  | Failed :: _ -> Failed :: []
  | x :: y :: xs ->  Pair (x, y) :: xs
  | _ -> Failed :: []


let car s =
  match s with
  | Pair (a, _) :: xs -> a :: xs
  | _ -> Failed :: []


let cdr s =
  match s with
  | Pair (_, b) :: xs -> b :: xs
  | _ -> Failed :: []


let compare_pair s =
  match s with
  | Pair (xa, xb) :: Pair (ya, yb) :: xs -> begin
    match xa, xb, ya, yb with
    | Ct Int ixa, Ct Int ixb, Ct Int iya, Ct Int iyb -> begin
      if ixa = iya then compare (xb :: yb :: xs) else compare (xa :: ya :: xs)
    end
    | Ct Nat ixa, Ct Nat ixb, Ct Nat iya, Ct Nat iyb -> begin
      if Rnat.to_int ixa = Rnat.to_int iya then compare (xb :: yb :: xs) else compare (xa :: ya :: xs)
    end
    | _ -> Failed :: []
  end
  | _ -> Failed :: []


let empty_set s =
  match s with
  | Failed :: _ -> Failed :: []
  | _ -> Set [] :: s

let rec mem_set_aux t l =
  match l with
  | [] -> Ct (Bool false)
  | hd :: tl -> begin
    let s = compare (Ct t :: Ct hd :: []) in begin
      match s with
      | Ct Int n :: [] ->
        if n = 1 then mem_set_aux t tl else begin
          if n = 0 then Ct (Bool true) else Ct (Bool false)
        end
      | _ -> Failed
    end
  end


let mem_set s =
  match s with
  | Ct t :: Set l :: xs -> mem_set_aux t l :: xs
  | _ -> Failed :: []


let rec update_set_aux t b l =
  match l with
  | [] -> begin
    if b then t :: [] else []
  end
  | hd :: tl -> begin
    let s = compare (Ct t :: Ct hd :: []) in begin
      match s with
      | Ct Int n :: [] ->
        if n = 1 then hd :: (update_set_aux t b tl) else begin
          if n = 0 then begin
            if b then l else tl
          end else begin
            if b then t :: hd :: tl else l
          end
        end
      | _ -> []
    end
  end


let update_set s =
  match s with
  | Ct t :: Ct Bool b :: Set l :: xs -> Set (update_set_aux t b l) :: xs
  | _ -> Failed :: []


let rec iter_set_aux body l s =
  match l with
  | [] -> s
  | hd :: tl -> iter_set_aux body tl (seq body (Ct hd :: s))


let iter_set body s =
  match s with
  | Set l :: xs -> iter_set_aux body l xs
  | _ -> Failed :: []


let rec size_set_aux l =
  match l with
  | [] -> Rnat.zero
  | _ :: tl -> Rnat.add (Rnat.succ (Rnat.zero)) (size_set_aux tl)


let size_set s =
  match s with
  | Set l :: xs -> Ct (Nat (size_set_aux l)) :: xs
  | _ -> Failed :: []


let some s =
  match s with
  | [] | Failed :: _ -> Failed :: []
  | x :: xs -> Some x :: xs


let none s =
  match s with
  | Failed :: _ -> Failed :: []
  | _ -> None :: s


let if_none bt bf s =
  match s with
  | None :: xs -> seq bt xs
  | Some x :: xs -> seq bf (x :: xs)
  | _ -> Failed :: []*)


let cons s =
  match s with
  | t :: LNil :: xs -> LCons (t, LNil) :: xs
  | t :: LCons (hd, tl) :: xs -> LCons (t, LCons (hd, tl)) :: xs
  | _ -> Failed :: []


let nil s =
  match s with
  | Failed :: _ -> Failed :: []
  | _ -> LNil :: s


let if_cons bt bf s =
  match s with
  | LNil :: xs -> seq bf xs
  | LCons (hd, tl) :: xs -> seq bt (hd :: tl :: xs)
  | _ -> Failed :: []


(*let rec map_list_aux body hd tl s =
  let (x' :: xs') = seq body (hd :: s) in begin
    match tl with
    | LNil -> LCons (x', LNil) :: xs'
    | LCons (hd', tl') ->
      let (x'' :: xs'') = map_list_aux body hd' tl' xs' in LCons (x', x'') :: xs''
    | _ -> Failed :: []
  end


let map_list body s =
  match s with
  | LNil :: xs -> s
  | LCons (hd, tl) :: xs -> map_list_aux body hd tl xs
  | _ -> Failed :: []*)

let rec size_list_aux tl =
  match tl with
  | LNil -> Rnat.zero
  | LCons (_, tl) -> Rnat.add (Rnat.succ (Rnat.zero)) (size_list_aux tl)
  | _ -> Rnat.zero


let size_list s =
  match s with
  | LNil :: xs -> Ct (Nat (Rnat.zero)) :: xs
  | LCons (_, tl) :: xs -> Ct (Nat (Rnat.add (Rnat.of_int 1) (size_list_aux tl))) :: xs
  | _ -> Failed :: []


let rec iter_list_aux body hd tl s =
  match tl with
  | LNil -> seq body (hd :: s)
  | LCons (hd', tl') -> iter_list_aux body hd' tl' (seq body (hd :: s))
  | _ -> Failed :: []

let iter_list body s =
  match s with
  | LNil :: xs -> xs
  | LCons (hd, tl) :: xs -> iter_list_aux body hd tl xs
  | _ -> Failed :: []

let contract s p =
  match s with
  | Ct Address a :: xs -> begin
    match p with
    | Unit -> Some (Contract Unit) :: xs
    | _ -> None :: xs
  end
  | _ -> Failed :: []


let transfer_tokens s =
  match s with
  | _ :: Ct Mutez _ :: Contract _ :: xs -> Operation :: xs
  | _ -> Failed :: []


let _ = 1
