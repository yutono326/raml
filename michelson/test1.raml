(* https://better-call.dev/delphinet/KT1DtE3TQXS8L1NNg1xxWCXJB4nWKHEeiFbR/code *)


exception Invalid_argument

type ct =
  Int of int | Nat of Rnat.t | String | Mutez of Rnat.t | Bool of bool | Keyhash of int |
  Timestamp of int | Address of int

and t =
  Ct of ct | Unit | None | Some of t | List of ct list | Set of ct list |
  Operation | Contract of t | Pair of t * t



let rec seq (body:(t list -> t list) list) s =
  match body with
  | [] -> s
  | op :: l -> seq l (op s)


let if_ bt bf (s:t list) =
  match s with
  | Ct Bool b :: xs -> if b then seq bt xs else seq bf xs
  | _ -> raise Invalid_argument


let rec loop_aux n body s =
  Rnat.ifz n
    (fun () -> s)
    (fun n' ->
      let s' = seq body s in
      match s' with
      | Ct Bool b :: xs -> if b then loop_aux n' body xs else xs
      | _ -> raise Invalid_argument)


let loop n body s =
  match s with
  | Ct Bool b :: xs -> if b then loop_aux n body xs else xs
  | _ -> raise Invalid_argument


let dip1 code (s: t list) =
  match s with
  | [] -> raise Invalid_argument
  | x :: xs -> x :: seq code xs

let rec dip n code (s:t list) =
  Rnat.ifz n
    (fun () -> code s)
    (fun n' ->
      match s with
      | [] -> raise Invalid_argument
      | x :: xs -> x :: dip n' code xs)


let drop1 (s:t list) =
  match s with
  | [] -> raise Invalid_argument
  | _ :: xs -> xs


let rec drop n (s:t list) =
  match s with
  | [] -> raise Invalid_argument
  | _ :: xs ->
    Rnat.ifz n
      (fun () -> s)
      (fun n' -> drop n' xs)

let dup (s:t list) =
  match s with
  | [] -> raise Invalid_argument
  | x :: xs -> x :: x :: xs


let swap (s:t list) =
  match s with
  | x :: y :: xs -> y :: x :: xs
  | _ -> raise Invalid_argument


let rec append l1 l2 =
  match l1 with
  | [] -> l2
  | x::xs -> x::(append xs l2)

let rec dig_aux n (s':t list) (s:t list)=
  Rnat.ifz n
    (fun () -> begin
      match s with
      | [] -> raise Invalid_argument
      | x :: xs -> append (x :: s') xs
    end)
    (fun n' -> begin
      match s with
      | [] -> raise Invalid_argument
      | x :: xs -> dig_aux n' (append s' [x]) xs
    end)

let dig n s = dig_aux n [] s


let rec dug n (s:t list) =
  Rnat.ifz n
    (fun () -> s)
    (fun n' -> begin
      match s with
      | x :: y :: xs -> y :: dug n' (x :: xs)
      | _ -> raise Invalid_argument
    end)


let push (x:t) (s:t list) =  x :: s


let unit s = Unit :: s


let eq s =
  match s with
  | Ct (Int i) :: xs ->
    if i = 0 then Ct (Bool true) :: xs else Ct (Bool false) :: xs
  | _ -> raise Invalid_argument


let neq s =
  match s with
  | Ct (Int i) :: xs ->
    if i = 0 then Ct (Bool false) :: xs else Ct (Bool true) :: xs
  | _ -> raise Invalid_argument


let lt s =
  match s with
  | Ct (Int i) :: xs ->
    if i < 0 then Ct (Bool true) :: xs else Ct (Bool false) :: xs
  | _ -> raise Invalid_argument


let gt s =
  match s with
  | Ct (Int i) :: xs ->
    if i > 0 then Ct (Bool true) :: xs else Ct (Bool false) :: xs
  | _ -> raise Invalid_argument


let le s =
  match s with
  | Ct (Int i) :: xs ->
    if i <= 0 then Ct (Bool true) :: xs else Ct (Bool false) :: xs
  | _ -> raise Invalid_argument


let ge s =
  match s with
  | Ct (Int i) :: xs ->
    if i >= 0 then Ct (Bool true) :: xs else Ct (Bool false) :: xs
  | _ -> raise Invalid_argument


let or_ s =
  match s with
  | Ct Bool bx :: Ct Bool by :: xs -> Ct (Bool (bx || by)) :: xs
  | _ -> raise Invalid_argument


let and_ s =
  match s with
  | Ct Bool bx :: Ct Bool by :: xs -> Ct (Bool (bx && by)) :: xs
  | _ -> raise Invalid_argument


let xor s =
  match s with
  | Ct Bool bx :: Ct Bool by :: xs -> Ct (Bool ((bx || by) && (not bx || not by))) :: xs
  | _ -> raise Invalid_argument


let not s =
  match s with
  | Ct Bool b :: xs -> Ct (Bool (not b)) :: xs
  | _ -> raise Invalid_argument


let neg s =
  match s with
  | Ct Int i :: xs -> Ct (Int (-i)) :: xs
  | Ct Nat i :: xs -> Ct (Int (-(Rnat.to_int i))) :: xs
  | _ -> raise Invalid_argument


let abs s =
  match s with
  | Ct Int i :: xs ->
    if i >= 0 then Ct (Nat (Rnat.of_int i)) :: xs else Ct (Nat (Rnat.of_int(-i))) :: xs
  | _ -> raise Invalid_argument


let isnat s =
  match s with
  | Ct Int i :: xs ->
    if i >= 0 then Some (Ct (Nat (Rnat.of_int i))) :: xs else None :: xs
  | _ -> raise Invalid_argument


let int s =
  match s with
  | Ct Nat i :: xs -> Ct (Int (Rnat.to_int i)) :: xs
  | _ -> raise Invalid_argument


let add s =
  match s with
  | Ct Int ix :: Ct Int iy :: xs -> Raml.tick(1.0); Ct (Int (ix + iy)) :: xs
  | Ct Int ix :: Ct Nat iy :: xs -> Raml.tick(1.0); Ct (Int (ix + (Rnat.to_int iy))) :: xs
  | Ct Nat ix :: Ct Int iy :: xs -> Raml.tick(1.0); Ct (Int ((Rnat.to_int ix) + iy)) :: xs
  | Ct Nat ix :: Ct Nat iy :: xs -> Raml.tick(1.0); Ct (Nat (Rnat.add ix iy)) :: xs
  | Ct Timestamp tx :: Ct Int iy :: xs -> Raml.tick(1.0); Ct (Timestamp (tx + iy)) :: xs
  | Ct Int ix :: Ct Timestamp ty :: xs -> Raml.tick(1.0); Ct (Timestamp (ix + ty)) :: xs
  | Ct Mutez mx :: Ct Mutez my :: xs -> Raml.tick(1.0); Ct (Mutez (Rnat.add mx my)) :: xs
  | _ -> raise Invalid_argument


let sub s =
  match s with
  | Ct Int ix :: Ct Int iy :: xs -> Raml.tick(1.0); Ct (Int (ix - iy)) :: xs
  | Ct Int ix :: Ct Nat iy :: xs -> Raml.tick(1.0); Ct (Int (ix - (Rnat.to_int iy))) :: xs
  | Ct Nat ix :: Ct Int iy :: xs -> Raml.tick(1.0); Ct (Int ((Rnat.to_int ix) - iy)) :: xs
  | Ct Nat ix :: Ct Nat iy :: xs -> Raml.tick(1.0); Ct (Int ((Rnat.to_int ix) - (Rnat.to_int iy))) :: xs
  | Ct Timestamp tx :: Ct Int iy :: xs -> Raml.tick(1.0); Ct (Timestamp (tx - iy)) :: xs
  | Ct Timestamp tx :: Ct Timestamp ty :: xs -> Raml.tick(1.0); Ct (Timestamp (tx - ty)) :: xs
  | Ct Mutez mx :: Ct Mutez my :: xs -> Raml.tick(1.0);
    let (m, _) = Rnat.minus mx my in Ct (Mutez m) :: xs
  | _ -> raise Invalid_argument


let mult s =
  match s with
  | Ct Int ix :: Ct Int iy :: xs -> Raml.tick(1.0); Ct (Int (ix * iy)) :: xs
  | Ct Int ix :: Ct Nat iy :: xs -> Raml.tick(1.0); Ct (Int (ix * (Rnat.to_int iy))) :: xs
  | Ct Nat ix :: Ct Int iy :: xs -> Raml.tick(1.0); Ct (Int ((Rnat.to_int ix) * iy)) :: xs
  | Ct Nat ix :: Ct Nat iy :: xs -> Raml.tick(1.0); Ct (Nat (Rnat.mult ix iy)) :: xs
  | Ct Mutez mx :: Ct Nat iy :: xs -> Raml.tick(1.0); Ct (Mutez (Rnat.mult mx iy)) :: xs
  | Ct Nat ix :: Ct Mutez my :: xs -> Raml.tick(1.0); Ct (Mutez (Rnat.mult ix my)) :: xs
  | _ -> raise Invalid_argument

let ediv s =
  match s with
  | Ct Int ix :: Ct Int iy :: xs ->
    if iy = 0 then None :: xs else Some (Pair (Ct (Int (ix / iy)), Ct (Nat (Rnat.of_int (ix mod iy))))) :: xs
  | Ct Int ix :: Ct Nat iy :: xs ->
    Rnat.ifz iy
      (fun () -> None :: xs)
      (fun n' -> Some (Pair (Ct (Int (ix / (Rnat.to_int iy))), Ct (Nat (Rnat.of_int (ix mod (Rnat.to_int iy)))))) :: xs)
  | Ct Nat ix :: Ct Int iy :: xs ->
    if iy = 0 then None :: xs else Some (Pair (Ct (Int ((Rnat.to_int ix) / iy)), Ct (Nat (Rnat.of_int ((Rnat.to_int ix) mod iy))))) :: xs
  | Ct Nat ix :: Ct Nat iy :: xs ->
    Rnat.ifz iy
      (fun () -> None :: xs)
      (fun n' -> let (d, m, _) = Rnat.div_mod ix iy in Some (Pair (Ct (Nat d), Ct (Nat m))) :: xs)
  | Ct Mutez mx :: Ct Nat iy :: xs ->
    Rnat.ifz iy
      (fun () -> None :: xs)
      (fun n' -> let (d, m, _) = Rnat.div_mod mx iy in Some (Pair (Ct (Mutez d), Ct (Mutez m))) :: xs)
  | Ct Mutez mx :: Ct Mutez my :: xs ->
    Rnat.ifz my
      (fun () -> None :: xs)
      (fun n' -> let (d, m, _) = Rnat.div_mod mx my in Some (Pair (Ct (Nat d), Ct (Mutez m))) :: xs)
  | _ -> raise Invalid_argument


let rec compare s =
  match s with
  | Ct Int ix :: Ct Int iy :: xs -> begin
    if ix < iy then Ct (Int (-1)) :: xs else begin
      if ix = iy then Ct (Int 0) :: xs else Ct (Int 1) :: xs
    end
  end
  | Ct Nat ix :: Ct Nat iy :: xs -> begin
    if Rnat.to_int ix < Rnat.to_int iy then Ct (Int (-1)) :: xs else begin
      if Rnat.to_int ix = Rnat.to_int iy then Ct (Int 0) :: xs else Ct (Int 1) :: xs
    end
  end
  | Ct Timestamp tx :: Ct Timestamp ty :: xs -> begin
    if tx < ty then Ct (Int (-1)) :: xs else begin
      if tx = ty then Ct (Int 0) :: xs else Ct (Int 1) :: xs
    end
  end
  | Ct Mutez mx :: Ct Mutez my :: xs -> begin
    if Rnat.to_int mx < Rnat.to_int my then Ct (Int (-1)) :: xs else begin
      if Rnat.to_int mx = Rnat.to_int my then Ct (Int 0) :: xs else Ct (Int 1) :: xs
    end
  end
  | _ -> raise Invalid_argument


let pair s =
  match s with
  | x :: y :: xs ->  Pair (x, y) :: xs
  | _ -> raise Invalid_argument


let car s =
  match s with
  | Pair (a, _) :: xs -> a :: xs
  | _ -> raise Invalid_argument


let cdr s =
  match s with
  | Pair (_, b) :: xs -> b :: xs
  | _ -> raise Invalid_argument


let compare_pair s =
  match s with
  | Pair (xa, xb) :: Pair (ya, yb) :: xs -> begin
    match xa, xb, ya, yb with
    | Ct Int ixa, Ct Int ixb, Ct Int iya, Ct Int iyb -> begin
      if ixa = iya then compare (xb :: yb :: xs) else compare (xa :: ya :: xs)
    end
    | Ct Nat ixa, Ct Nat ixb, Ct Nat iya, Ct Nat iyb -> begin
      if Rnat.to_int ixa = Rnat.to_int iya then compare (xb :: yb :: xs) else compare (xa :: ya :: xs)
    end
    | _ -> raise Invalid_argument
  end
  | _ -> raise Invalid_argument


let empty_set s = Set [] :: s

let rec mem_set_aux t l =
  match l with
  | [] -> Ct (Bool false)
  | hd :: tl -> begin
    let s = compare ((Ct t) :: (Ct hd) :: []) in begin
      match s with
      | Ct Int n :: [] ->
        if n = 1 then mem_set_aux t tl else begin
          if n = 0 then Ct (Bool true) else Ct (Bool false)
        end
      | _ -> raise Invalid_argument
    end
  end


let mem_set s =
  match s with
  | Ct t :: Set l :: xs -> mem_set_aux t l :: xs
  | _ -> raise Invalid_argument


let rec update_set_aux t b l =
  match l with
  | [] -> begin
    if b then t :: [] else []
  end
  | hd :: tl -> begin
    let s = compare ((Ct t) :: (Ct hd) :: []) in begin
      match s with
      | Ct Int n :: [] ->
        if n = 1 then hd :: (update_set_aux t b tl) else begin
          if n = 0 then begin
            if b then l else tl
          end else begin
            if b then t :: hd :: tl else l
          end
        end
      | _ -> raise Invalid_argument
    end
  end


let update_set s =
  match s with
  | Ct t :: Ct Bool b :: Set l :: xs -> Set (update_set_aux t b l) :: xs
  | _ -> raise Invalid_argument


let rec iter_set_aux body l s =
  match l with
  | [] -> s
  | hd :: tl -> iter_set_aux body tl (seq body ((Ct hd) :: s))


let iter_set (body:(t list -> t list) list) s =
  match s with
  | Set l :: xs -> iter_set_aux body l xs
  | _ -> raise Invalid_argument


let rec size_set_aux l =
  match l with
  | [] -> Rnat.zero
  | _ :: tl -> Rnat.add (Rnat.succ (Rnat.zero)) (size_set_aux tl)


let size_set s =
  match s with
  | Set l :: xs -> Ct (Nat (size_set_aux l)) :: xs
  | _ -> raise Invalid_argument


let some s =
  match s with
  | x :: xs -> Some x :: xs
  | _ -> raise Invalid_argument


let none s = None :: s


let if_none bt bf s =
  match s with
  | None :: xs -> seq bt xs
  | Some x :: xs -> seq bf (x :: xs)
  | _ -> raise Invalid_argument

let cons s =
  match s with
  | Ct t :: List l :: xs -> begin
    match t, l with
    | Int _, Int _ :: _ | Nat _, Nat _ :: _ | Bool _, Bool _ :: _ -> List (t :: l) :: xs
    | _ -> raise Invalid_argument
  end
  | _ -> raise Invalid_argument


let nil s = List [] :: s


let if_cons bt bf s =
  match s with
  | List l :: xs -> begin
    match l with
    | [] -> seq bf xs
    | hd :: tl -> seq bt ((Ct hd) :: (List tl) :: xs)
  end
  | _ -> raise Invalid_argument


let rec map_list_aux body l (s:t list) =
  match l with
  | [] -> (List l) :: s
  | hd :: tl -> let s' = seq body ((Ct hd) :: s) in begin
    match s' with
    | Ct x' :: xs' -> let s'' = map_list_aux body tl xs' in begin
      match s'' with
      | List l' :: xs'' -> (List (x' :: l')) :: xs''
      | _ -> raise Invalid_argument
    end
    | _ -> raise Invalid_argument
  end


let map_list body s =
  match s with
  | List l :: xs -> map_list_aux body l xs
  | _ -> raise Invalid_argument


let rec iter_list_aux body l s =
  match l with
  | [] -> s
  | hd :: tl -> iter_list_aux body tl (seq body ((Ct hd) :: s))

let iter_list body s =
  match s with
  | List l :: xs-> iter_list_aux body l xs
  | _ -> raise Invalid_argument

let contract p s =
  match s with
  | Ct Address a :: xs -> begin
    match p with
    | Unit -> Some (Contract p) :: xs
    | _ -> None :: xs
  end
  | _ -> raise Invalid_argument


let transfer_tokens s =
  match s with
  | x :: Ct Mutez m :: Contract c :: xs -> Operation :: xs
  | _ -> raise Invalid_argument


let unpair s =
  seq [dup; car; dip1 [cdr]] s


let _ =
  seq
  [nil; dig (Rnat.of_int 1); dup; car; dip1 [cdr]; drop1; push (Ct (Address 1)); contract Unit;
  if_none [push (Ct (String))] []; push (Ct (Address 1)); contract Unit; if_none [push (Ct (String))] [];
  dig (Rnat.of_int 3); dup; dug (Rnat.of_int 4); dig (Rnat.of_int 2); dup; dug (Rnat.of_int 3);
  push (Ct (Mutez Rnat.zero)); push Unit; transfer_tokens; cons; (*dip1 [dig (Rnat.of_int 3); drop1];
  dug (Rnat.of_int 3); dig (Rnat.of_int 3); dup; dug (Rnat.of_int 4); dig (Rnat.of_int 1); dup;
  dug (Rnat.of_int 2); push (Ct (Mutez Rnat.zero)); push Unit; transfer_tokens; cons;
  dip1 [dig (Rnat.of_int 3); drop1]; dug (Rnat.of_int 3); drop (Rnat.of_int 2); dig (Rnat.of_int 1); pair*)]
  (Pair (Unit, Unit) :: [])

(*let _ = unpair (Pair (Unit, Unit) :: [])*)
