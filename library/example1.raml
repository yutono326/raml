exception Invalid_argument

type t =
  Int of int | Nat of Rnat.t | Mutez of Rnat.t | Bool of bool | Address | Unit | MNone | MSome of t | LNil | LCons of t * t | Operation | Contract | Pair of t * t | Left of t | Right of t

let failwith s = raise Invalid_argument

let nop s = s

let p = fun s -> Raml.tick(1.0); s

let (|>) f g = fun s -> g (f s)

let if_ (bt:t list -> t list) (bf:t list -> t list) s =
  match s with
  | Bool b :: xs -> Raml.tick(3.0); if b then bt xs else bf xs
  | _ ->  raise Invalid_argument

let rec loop n body s =
  Rnat.ifz n
    (fun () ->
      match s with
      | _ :: xs -> Raml.tick(2.0); xs
      | _ -> raise Invalid_argument)
    (fun n' ->
      match s with
      | _ :: xs -> Raml.tick(2.0); loop n' body (body xs)
      | _ -> raise Invalid_argument)

let dip1 body s =
  match s with
  | x :: xs -> Raml.tick(2.0); x :: (body xs)
  | _ -> raise Invalid_argument

let drop1 s =
  match s with
  | _ :: xs -> Raml.tick(3.0); xs
  | _ -> raise Invalid_argument

let dup s =
  match s with
  | x :: xs -> Raml.tick(3.0); x :: x :: xs
  | _ -> raise Invalid_argument

let swap s =
  match s with
  | x :: y :: xs -> Raml.tick(3.0); y :: x :: xs
  | _ -> raise Invalid_argument

let push elm s = Raml.tick(3.0); elm :: s

let unit s = Raml.tick(3.0); Unit :: s

let eq s =
  match s with
  | Int i :: xs -> Raml.tick(3.0); Bool (i = 0) :: xs
  | _ -> raise Invalid_argument

let neq s =
  match s with
  | Int i :: xs -> Raml.tick(3.0); Bool (not (i = 0)) :: xs
  | _ -> raise Invalid_argument

let lt s =
  match s with
  | Int i :: xs -> Raml.tick(3.0); Bool (i < 0) :: xs
  | _ -> raise Invalid_argument

let gt s =
  match s with
  | Int i :: xs -> Raml.tick(3.0); Bool (i > 0) :: xs
  | _ -> raise Invalid_argument

let le s =
  match s with
  | Int i :: xs -> Raml.tick(3.0); Bool (i <= 0) :: xs
  | _ -> raise Invalid_argument

let ge s =
  match s with
  | Int i :: xs -> Raml.tick(3.0); Bool (i >= 0) :: xs
  | _ -> raise Invalid_argument

let or_ s =
  match s with
  | Bool bx :: Bool by :: xs -> Raml.tick(3.0); Bool (bx || by) :: xs
  | _ -> raise Invalid_argument

let and_ s =
  match s with
  | Bool bx :: Bool by :: xs -> Raml.tick(3.0); Bool (bx && by) :: xs
  | _ -> raise Invalid_argument

let xor s =
  match s with
  | Bool bx :: Bool by :: xs -> Raml.tick(3.0); Bool ((bx || by) && (not bx || not by)) :: xs
  | _ -> raise Invalid_argument

let not_ s =
  match s with
  | Bool b :: xs -> Raml.tick(3.0); Bool (not b) :: xs
  | _ ->  raise Invalid_argument

let neg s =
  match s with
  | Int i :: xs -> Raml.tick(6.0); Int (-i) :: xs
  | Nat n :: xs -> Raml.tick(6.0); Int (-(Rnat.to_int n)) :: xs
  | _ -> raise Invalid_argument

let abs s =
  match s with
  | Int i :: xs -> Raml.tick(6.0);
    if i >= 0 then Nat (Rnat.of_int i) :: xs else Nat (Rnat.of_int (-i)) :: xs
  | _ -> raise Invalid_argument

let isnat s =
  match s with
  | Int i :: xs -> Raml.tick(6.0);
    if i >= 0 then MSome (Nat (Rnat.of_int i)) :: xs else MNone :: xs
  | _ -> raise Invalid_argument

let int s =
  match s with
  | Nat n :: xs -> Raml.tick(3.0); Int (Rnat.to_int n) :: xs
  | _ -> raise Invalid_argument

(* tick = 3.0 *. (numbits (max ix iy)) +. 4.0 *)
let add s =
  match s with
  | Int ix :: Int iy :: xs -> Raml.tick(4.0); Int (ix + iy) :: xs
  | Int ix :: Nat iy :: xs -> Raml.tick(4.0); Int (ix + (Rnat.to_int iy)) :: xs
  | Nat ix :: Int iy :: xs -> Raml.tick(4.0); Int ((Rnat.to_int ix) + iy) :: xs
  | Nat ix :: Nat iy :: xs -> Raml.tick(4.0); Nat (Rnat.add ix iy) :: xs
  | Mutez ix :: Mutez iy :: xs -> Raml.tick(7.0); Mutez (Rnat.add ix iy) :: xs
  | _ -> raise Invalid_argument

let sub s =
  match s with
  | Int ix :: Int iy :: xs -> Raml.tick(4.0); Int (ix - iy) :: xs
  | Int ix :: Nat iy :: xs -> Raml.tick(4.0); Int (ix - (Rnat.to_int iy)) :: xs
  | Nat ix :: Int iy :: xs -> Raml.tick(4.0); Int ((Rnat.to_int ix) - iy) :: xs
  | Nat ix :: Nat iy :: xs -> Raml.tick(4.0); Int ((Rnat.to_int ix) - (Rnat.to_int iy)) :: xs
  | Mutez ix :: Mutez iy :: xs -> Raml.tick(7.0);
    let (m, _) = Rnat.minus ix iy in Mutez m :: xs
  | _ -> raise Invalid_argument

let mul s =
  match s with
  | Int ix :: Int iy :: xs -> Raml.tick(4.0); Int (ix * iy) :: xs
  | Int ix :: Nat iy :: xs -> Raml.tick(4.0); Int (ix * (Rnat.to_int iy)) :: xs
  | Nat ix :: Int iy :: xs -> Raml.tick(4.0); Int ((Rnat.to_int ix) * iy) :: xs
  | Nat ix :: Nat iy :: xs -> Raml.tick(4.0); Nat (Rnat.mult ix iy) :: xs
  | Mutez ix :: Nat iy :: xs -> Raml.tick(13.0); Mutez (Rnat.mult ix iy) :: xs
  | Nat ix :: Mutez iy :: xs -> Raml.tick(13.0); Mutez (Rnat.mult ix iy) :: xs
  | _ -> raise Invalid_argument

let ediv s =
  match s with
  | Int ix :: Int iy :: xs -> Raml.tick(10.0);
    if iy = 0 then MNone :: xs else MSome (Pair (Int (ix / iy), Nat (Rnat.of_int (ix mod iy)))) :: xs
  | Int ix :: Nat iy :: xs -> Raml.tick(10.0);
    Rnat.ifz iy
      (fun () -> MNone :: xs)
      (fun n' -> MSome (Pair (Int (ix / (Rnat.to_int iy)), Nat (Rnat.of_int (ix mod (Rnat.to_int iy))))) :: xs)
  | Nat ix :: Int iy :: xs -> Raml.tick(10.0);
    if iy = 0 then MNone :: xs else MSome (Pair (Int ((Rnat.to_int ix) / iy), Nat (Rnat.of_int ((Rnat.to_int ix) mod iy)))) :: xs
  | Nat ix :: Nat iy :: xs -> Raml.tick(10.0);
    Rnat.ifz iy
      (fun () -> MNone :: xs)
      (fun n' -> let (d, m, _) = Rnat.div_mod ix iy in MSome (Pair (Nat d, Nat m)) :: xs)
  | Mutez ix :: Nat iy :: xs -> Raml.tick(16.0);
    Rnat.ifz iy
      (fun () -> MNone :: xs)
      (fun n' -> let (d, m, _) = Rnat.div_mod ix iy in MSome (Pair (Mutez d, Mutez m)) :: xs)
  | Mutez ix :: Mutez iy :: xs -> Raml.tick(22.0);
    Rnat.ifz iy
      (fun () -> MNone :: xs)
      (fun n' -> let (d, m, _) = Rnat.div_mod ix iy in MSome (Pair (Nat d, Mutez m)) :: xs)
  | _ -> raise Invalid_argument

let rec compare s =
  match s with
  | Int ix :: Int iy :: xs -> Raml.tick(4.0); begin
    if ix < iy then Int (-1) :: xs else begin
      if ix = iy then Int 0 :: xs else Int 1 :: xs
    end
  end
  | Nat ix :: Nat iy :: xs -> Raml.tick(4.0); begin
    if Rnat.to_int ix < Rnat.to_int iy then Int (-1) :: xs else begin
      if Rnat.to_int ix = Rnat.to_int iy then Int 0 :: xs else Int 1 :: xs
    end
  end
  | Mutez ix :: Mutez iy :: xs -> Raml.tick(3.0); begin
    if Rnat.to_int ix < Rnat.to_int iy then Int (-1) :: xs else begin
      if Rnat.to_int ix = Rnat.to_int iy then Int 0 :: xs else Int 1 :: xs
    end
  end
  | _ -> raise Invalid_argument

let rec compare_notick s =
  match s with
  | Int ix :: Int iy :: xs -> begin
    if ix < iy then Int (-1) :: xs else begin
      if ix = iy then Int 0 :: xs else Int 1 :: xs
    end
  end
  | Nat ix :: Nat iy :: xs -> begin
    if Rnat.to_int ix < Rnat.to_int iy then Int (-1) :: xs else begin
      if Rnat.to_int ix = Rnat.to_int iy then Int 0 :: xs else Int 1 :: xs
    end
  end
  | Mutez ix :: Mutez iy :: xs -> begin
    if Rnat.to_int ix < Rnat.to_int iy then Int (-1) :: xs else begin
      if Rnat.to_int ix = Rnat.to_int iy then Int 0 :: xs else Int 1 :: xs
    end
  end
  | _ -> raise Invalid_argument

let pair s =
  match s with
  | x :: y :: xs -> Raml.tick(8.0); (Pair (x, y)) :: xs
  | _ -> raise Invalid_argument

let car s =
  match s with
  | Pair (a, _) :: xs -> Raml.tick(3.0); a :: xs
  | _ -> raise Invalid_argument

let cdr s =
  match s with
  | Pair (_, b) :: xs -> Raml.tick(3.0); b :: xs
  | _ -> raise Invalid_argument

let some s =
  match s with
  | x :: xs -> Raml.tick(6.0); MSome x :: xs
  | _ -> raise Invalid_argument

let none s = Raml.tick(6.0); MNone :: s

let if_none bt bf s =
  match s with
  | MNone :: xs -> Raml.tick(5.0); bt xs
  | MSome x :: xs -> Raml.tick(5.0); bf (x :: xs)
  | _ -> raise Invalid_argument

let left s =
  match s with
  | x :: xs -> Raml.tick(6.0); Left x :: xs
  | _ -> raise Invalid_argument

let right s =
  match s with
  | x :: xs -> Raml.tick(6.0); Right x :: xs
  | _ -> raise Invalid_argument

let if_left bt bf s =
  match s with
  | Left a :: xs -> Raml.tick(5.0); bt (a :: xs)
  | Right b :: xs -> Raml.tick(5.0); bf (b :: xs)
  | _ -> raise Invalid_argument

let cons s =
  match s with
  | x :: LCons(y, z) :: xs -> Raml.tick(8.0); LCons(x, LCons(y, z)) :: xs
  | x :: LNil :: xs -> Raml.tick(8.0); LCons(x, LNil) :: xs
  | _ -> raise Invalid_argument

let nil s = Raml.tick(6.0); LNil :: s

let if_cons bt bf s =
  match s with
  | LNil :: xs -> Raml.tick(5.0); bf xs
  | LCons (hd, tl) :: xs -> Raml.tick(5.0); bt (hd :: tl :: xs)
  | _ -> raise Invalid_argument

let rec map_list_aux body hd tl s =
  match tl with
  | LNil -> begin
    match (body (hd :: s)) with
    | [] -> raise Invalid_argument
    | x' :: xs' -> Raml.tick(3.0); LCons (x', LNil) :: xs'
  end
  | LCons (hd', tl') -> begin
    match (body (hd :: s)) with
    | [] -> raise Invalid_argument
    | x' :: xs' -> Raml.tick(1.0); begin
      match (map_list_aux body hd' tl' xs') with
      | [] -> raise Invalid_argument
      | x'' :: xs'' -> LCons (x', x'') :: xs''
    end
  end
  | _ -> raise Invalid_argument

let map_list body s =
  match s with
  | LNil :: xs -> Raml.tick(4.0); s
  | LCons (hd, tl) :: xs -> Raml.tick(2.0); map_list_aux body hd tl xs
  | _ -> raise Invalid_argument

let rec size_list_aux tl =
  match tl with
  | LNil -> Rnat.zero
  | LCons (_, tl') -> Rnat.add (Rnat.of_int 1) (size_list_aux tl')
  | _ -> raise Invalid_argument

let size_list s =
  match s with
  | LNil :: xs -> Raml.tick(4.0); Nat (Rnat.zero) :: xs
  | LCons (_, tl) :: xs -> Raml.tick(4.0); Nat (Rnat.add (Rnat.of_int 1) (size_list_aux tl)) :: xs
  | _ -> raise Invalid_argument

let rec iter_list_aux body hd tl s =
  match tl with
  | LNil -> Raml.tick(3.0); body (hd :: s)
  | LCons (hd', tl') -> Raml.tick(1.0); iter_list_aux body hd' tl' (body (hd :: s))
  | _ -> raise Invalid_argument

let iter_list body s =
  match s with
  | LNil :: xs -> Raml.tick(4.0); xs
  | LCons (hd, tl) :: xs -> Raml.tick(2.0); iter_list_aux body hd tl xs
  | _ -> raise Invalid_argument

let transfer_tokens s =
  match s with
  | _ :: Mutez _ :: Contract :: xs -> Raml.tick(20.0); Operation :: xs
  | _ -> raise Invalid_argument

let contract s =
  match s with
  | Address :: xs -> Raml.tick(3.0);
    if true then MSome Contract :: xs else MNone :: xs
  | _ -> raise Invalid_argument

let source s = Raml.tick(3.0); Address :: s

let amount s = Raml.tick(3.0); Mutez Rnat.zero :: s

(* Derived upper bound 37.00 *)
(* Interpreter Cost 43 *)
let _ =
  (pair
  (nil
  (add
  (dip1 (p |> cdr |> p)
  (car
  (dup
  (car
  (Pair (Pair (Int 3, Int 5),  Int 0) :: []))))))))
